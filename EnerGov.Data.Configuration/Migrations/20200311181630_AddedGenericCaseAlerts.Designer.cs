// <auto-generated />
using System;
using EnerGov.Data.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EnerGov.Data.Configuration.Migrations
{
    [DbContext(typeof(ConfigurationDbContext))]
    [Migration("20200311181630_AddedGenericCaseAlerts")]
    partial class AddedGenericCaseAlerts
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EnerGov.Business.Alerting.GenericCaseAlerts.Models.GenericCaseAlertScan", b =>
                {
                    b.Property<string>("Module")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RowVersion")
                        .HasColumnType("int");

                    b.Property<Guid?>("CaseStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateScanned")
                        .HasColumnType("datetime2");

                    b.HasKey("Module", "CaseId", "RowVersion");

                    b.ToTable("GenericCaseAlertScan","Alerting");
                });

            modelBuilder.Entity("EnerGov.Business.Alerting.GenericCaseAlerts.Models.GenericCaseAlertSpecification", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("BodyHtml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Recipients")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("TypeFilter")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("WorkClassFilter")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.HasKey("Name");

                    b.ToTable("GenericCaseAlertSpecifications","Alerting");
                });

            modelBuilder.Entity("EnerGov.Business.Alerting.NewCssPermitAlerts.Models.NewCssPermitAlert", b =>
                {
                    b.Property<Guid>("PermitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailsNotified")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("PermitId");

                    b.ToTable("NewCssPermitAlerts","Alerting");
                });

            modelBuilder.Entity("EnerGov.Business.Alerting.NewCssPermitAlerts.Models.NewCssPermitAlertType", b =>
                {
                    b.Property<Guid>("PermitTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermitWorkClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailsToAlert")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<bool>("IsBuildingDistrictRouted")
                        .HasColumnType("bit");

                    b.Property<bool>("SendAlerts")
                        .HasColumnType("bit");

                    b.HasKey("PermitTypeId", "PermitWorkClassId");

                    b.ToTable("NewCssPermitAlertTypes","Alerting");
                });

            modelBuilder.Entity("EnerGov.Business.FireOccupancy.InspectionAutomations.Models.Inspection", b =>
                {
                    b.Property<Guid>("InspectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RowVersion")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateScanned")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InspectionStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InspectionId", "RowVersion");

                    b.ToTable("Inspections","FireOccupancy");
                });

            modelBuilder.Entity("EnerGov.Business.FireOccupancy.InspectionAutomations.Models.InspectionEmail", b =>
                {
                    b.Property<Guid>("InspectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RowVersion")
                        .HasColumnType("int");

                    b.Property<Guid>("EmailId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InspectionId", "RowVersion", "EmailId");

                    b.HasIndex("EmailId");

                    b.ToTable("InspectionEmails","FireOccupancy");
                });

            modelBuilder.Entity("EnerGov.Business.FireOccupancy.InspectionAutomations.Models.InspectionFollowUp", b =>
                {
                    b.Property<Guid>("InspectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RowVersion")
                        .HasColumnType("int");

                    b.Property<Guid>("InspectionNonComplianceCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConfirmationUserWindowsSid")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("DateNotificationSent")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReminderSend")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FollowUpDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastNotificationAttemptDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastReminderAttemptDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NotificationFailureCount")
                        .HasColumnType("int");

                    b.Property<int>("ReminderFailureCount")
                        .HasColumnType("int");

                    b.HasKey("InspectionId", "RowVersion", "InspectionNonComplianceCodeId");

                    b.ToTable("InspectionFollowUps","FireOccupancy");
                });

            modelBuilder.Entity("EnerGov.Business.FireOccupancy.InspectionAutomations.Models.Inspector", b =>
                {
                    b.Property<Guid>("CustomFieldPickListItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("CustomFieldPickListItemId");

                    b.ToTable("Inspectors","FireOccupancy");
                });

            modelBuilder.Entity("EnerGov.Business.FireOccupancy.InspectionAutomations.Models.ReInspection", b =>
                {
                    b.Property<Guid>("InspectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RowVersion")
                        .HasColumnType("int");

                    b.Property<Guid>("ReInspectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateNotificationSent")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReminderSend")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastNotificationAttemptDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastReminderAttemptDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NotificationFailureCount")
                        .HasColumnType("int");

                    b.Property<int>("ReminderFailureCount")
                        .HasColumnType("int");

                    b.HasKey("InspectionId", "RowVersion", "ReInspectionId");

                    b.ToTable("ReInspections","FireOccupancy");
                });

            modelBuilder.Entity("EnerGov.Business.FireOccupancy.InspectionZones.InspectionZone", b =>
                {
                    b.Property<Guid>("InspectionZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsZoneEscalatable")
                        .HasColumnType("bit");

                    b.Property<string>("ZoneAbbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("ZoneEscalationContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ZoneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("InspectionZoneId");

                    b.HasAlternateKey("ZoneAbbreviation");

                    b.ToTable("InspectionZones","FireOccupancy");
                });

            modelBuilder.Entity("EnerGov.Business.FireOccupancy.NotificationAutomations.ReInspectionNotification", b =>
                {
                    b.Property<Guid>("InspectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("NotificationDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("InspectorId", "NotificationDateTime");

                    b.ToTable("ReInspectionNotifications","FireOccupancy");
                });

            modelBuilder.Entity("EnerGov.Business.Identity.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Roles","Identity");
                });

            modelBuilder.Entity("EnerGov.Business.Identity.Roles.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PermissionName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("RoleId", "PermissionName");

                    b.ToTable("RolePermissions","Identity");
                });

            modelBuilder.Entity("EnerGov.Business.Identity.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("WindowsSid")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasAlternateKey("WindowsSid");

                    b.ToTable("Users","Identity");
                });

            modelBuilder.Entity("EnerGov.Business.Identity.Users.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles","Identity");
                });

            modelBuilder.Entity("EnerGov.Business.UtilityExcavation.UtilityCustomers.UtilityCustomer", b =>
                {
                    b.Property<Guid>("EnerGovGlobalEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("EnerGovGlobalEntityId");

                    b.ToTable("UtilityCustomers","UtilityExcavation");
                });

            modelBuilder.Entity("EnerGov.Business.UtilityExcavation.UtilityFeeGLAccounts.UtilityFeeGLAccount", b =>
                {
                    b.Property<Guid>("EnerGovFeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EnerGovPickListItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MunisExpenseAccountObject")
                        .IsRequired()
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("MunisExpenseAccountOrg")
                        .IsRequired()
                        .HasColumnType("nvarchar(7)")
                        .HasMaxLength(7);

                    b.Property<string>("MunisExpenseAccountProject")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<string>("MunisExpenseCashAccountObject")
                        .IsRequired()
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("MunisExpenseCashAccountOrg")
                        .IsRequired()
                        .HasColumnType("nvarchar(7)")
                        .HasMaxLength(7);

                    b.Property<string>("MunisRevenueAccountObject")
                        .IsRequired()
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("MunisRevenueAccountOrg")
                        .IsRequired()
                        .HasColumnType("nvarchar(7)")
                        .HasMaxLength(7);

                    b.Property<string>("MunisRevenueAccountProject")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<string>("MunisRevenueCashAccountObject")
                        .IsRequired()
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("MunisRevenueCashAccountOrg")
                        .IsRequired()
                        .HasColumnType("nvarchar(7)")
                        .HasMaxLength(7);

                    b.HasKey("EnerGovFeeId", "EnerGovPickListItemId");

                    b.ToTable("UtilityFeeGLAccounts","UtilityExcavation");
                });

            modelBuilder.Entity("EnerGov.Services.Email.Models.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BodyHtml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("EmailType")
                        .HasColumnType("int");

                    b.Property<string>("FromAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Emails","Emails");
                });

            modelBuilder.Entity("EnerGov.Services.Email.Models.EmailAttachment", b =>
                {
                    b.Property<Guid>("EmailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<byte[]>("FileContents")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("EmailId", "FileName");

                    b.ToTable("EmailAttachments","Emails");
                });

            modelBuilder.Entity("EnerGov.Services.Email.Models.EmailRecipient", b =>
                {
                    b.Property<Guid>("EmailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToAddress")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<string>("FailureAddress")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("LastSendAttemptDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SendFailureCount")
                        .HasColumnType("int");

                    b.HasKey("EmailId", "ToAddress");

                    b.ToTable("EmailRecipients","Emails");
                });

            modelBuilder.Entity("EnerGov.Services.Email.Models.EmailRecipientEvent", b =>
                {
                    b.Property<Guid>("EmailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToAddress")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("EventContents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("EmailId", "ToAddress", "EventId");

                    b.ToTable("EmailRecipientEvents","Emails");
                });

            modelBuilder.Entity("EnerGov.Business.FireOccupancy.InspectionAutomations.Models.InspectionEmail", b =>
                {
                    b.HasOne("EnerGov.Services.Email.Models.Email", "Email")
                        .WithMany()
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnerGov.Business.FireOccupancy.InspectionAutomations.Models.Inspection", "Inspection")
                        .WithMany("Emails")
                        .HasForeignKey("InspectionId", "RowVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EnerGov.Business.FireOccupancy.InspectionAutomations.Models.InspectionFollowUp", b =>
                {
                    b.HasOne("EnerGov.Business.FireOccupancy.InspectionAutomations.Models.Inspection", "Inspection")
                        .WithMany("InspectionFollowUps")
                        .HasForeignKey("InspectionId", "RowVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EnerGov.Business.FireOccupancy.InspectionAutomations.Models.ReInspection", b =>
                {
                    b.HasOne("EnerGov.Business.FireOccupancy.InspectionAutomations.Models.Inspection", "Inspection")
                        .WithMany("ReInspections")
                        .HasForeignKey("InspectionId", "RowVersion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EnerGov.Business.Identity.Roles.RolePermission", b =>
                {
                    b.HasOne("EnerGov.Business.Identity.Roles.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EnerGov.Business.Identity.Users.UserRole", b =>
                {
                    b.HasOne("EnerGov.Business.Identity.Roles.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnerGov.Business.Identity.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EnerGov.Services.Email.Models.EmailAttachment", b =>
                {
                    b.HasOne("EnerGov.Services.Email.Models.Email", "Email")
                        .WithMany("Attachments")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EnerGov.Services.Email.Models.EmailRecipient", b =>
                {
                    b.HasOne("EnerGov.Services.Email.Models.Email", "Email")
                        .WithMany("Recipients")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EnerGov.Services.Email.Models.EmailRecipientEvent", b =>
                {
                    b.HasOne("EnerGov.Services.Email.Models.EmailRecipient", "EmailRecipient")
                        .WithMany("EmailRecipientEvents")
                        .HasForeignKey("EmailId", "ToAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
