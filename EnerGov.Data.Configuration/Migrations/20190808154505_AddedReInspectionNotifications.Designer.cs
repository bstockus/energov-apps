// <auto-generated />
using System;
using EnerGov.Data.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EnerGov.Data.Configuration.Migrations {
    [DbContext(typeof(ConfigurationDbContext))]
    [Migration("20190808154505_AddedReInspectionNotifications")]
    partial class AddedReInspectionNotifications {
        protected override void BuildTargetModel(ModelBuilder modelBuilder) {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EnerGov.Business.FireOccupancy.InspectionAutomations.Models.Inspection", b => {
                b.Property<Guid>("InspectionId");

                b.Property<int>("RowVersion");

                b.Property<DateTime>("DateScanned");

                b.Property<Guid>("InspectionStatusId");

                b.HasKey("InspectionId", "RowVersion");

                b.ToTable("Inspections", "FireOccupancy");
            });

            modelBuilder.Entity("EnerGov.Business.FireOccupancy.InspectionAutomations.Models.InspectionEmail", b => {
                b.Property<Guid>("InspectionId");

                b.Property<int>("RowVersion");

                b.Property<Guid>("EmailId");

                b.HasKey("InspectionId", "RowVersion", "EmailId");

                b.HasIndex("EmailId");

                b.ToTable("InspectionEmails", "FireOccupancy");
            });

            modelBuilder.Entity("EnerGov.Business.FireOccupancy.InspectionAutomations.Models.InspectionFollowUp", b => {
                b.Property<Guid>("InspectionId");

                b.Property<int>("RowVersion");

                b.Property<Guid>("InspectionNonComplianceCodeId");

                b.Property<DateTime?>("ConfirmationDate");

                b.Property<string>("ConfirmationUserWindowsSid")
                    .HasMaxLength(100);

                b.Property<DateTime?>("DateNotificationSent");

                b.Property<DateTime?>("DateReminderSend");

                b.Property<DateTime>("FollowUpDate");

                b.Property<DateTime?>("LastNotificationAttemptDate");

                b.Property<DateTime?>("LastReminderAttemptDate");

                b.Property<int>("NotificationFailureCount");

                b.Property<int>("ReminderFailureCount");

                b.HasKey("InspectionId", "RowVersion", "InspectionNonComplianceCodeId");

                b.ToTable("InspectionFollowUps", "FireOccupancy");
            });

            modelBuilder.Entity("EnerGov.Business.FireOccupancy.InspectionAutomations.Models.Inspector", b => {
                b.Property<Guid>("CustomFieldPickListItemId")
                    .ValueGeneratedOnAdd();

                b.Property<string>("EmailAddress")
                    .IsRequired()
                    .HasMaxLength(255);

                b.HasKey("CustomFieldPickListItemId");

                b.ToTable("Inspectors", "FireOccupancy");
            });

            modelBuilder.Entity("EnerGov.Business.FireOccupancy.InspectionAutomations.Models.ReInspection", b => {
                b.Property<Guid>("InspectionId");

                b.Property<int>("RowVersion");

                b.Property<Guid>("ReInspectionId");

                b.Property<DateTime?>("DateNotificationSent");

                b.Property<DateTime?>("DateReminderSend");

                b.Property<DateTime?>("LastNotificationAttemptDate");

                b.Property<DateTime?>("LastReminderAttemptDate");

                b.Property<int>("NotificationFailureCount");

                b.Property<int>("ReminderFailureCount");

                b.HasKey("InspectionId", "RowVersion", "ReInspectionId");

                b.ToTable("ReInspections", "FireOccupancy");
            });

            modelBuilder.Entity("EnerGov.Business.FireOccupancy.InspectionZones.InspectionZone", b => {
                b.Property<Guid>("InspectionZoneId")
                    .ValueGeneratedOnAdd();

                b.Property<bool>("IsZoneEscalatable");

                b.Property<string>("ZoneAbbreviation")
                    .IsRequired()
                    .HasMaxLength(10);

                b.Property<string>("ZoneEscalationContactEmail")
                    .IsRequired()
                    .HasMaxLength(255);

                b.Property<string>("ZoneName")
                    .IsRequired()
                    .HasMaxLength(100);

                b.HasKey("InspectionZoneId");

                b.HasAlternateKey("ZoneAbbreviation");

                b.ToTable("InspectionZones", "FireOccupancy");
            });

            modelBuilder.Entity("EnerGov.Business.FireOccupancy.NotificationAutomations.ReInspectionNotification", b => {
                b.Property<Guid>("InspectionId");

                b.Property<DateTime>("NotificationDateTime");

                b.HasKey("InspectionId", "NotificationDateTime");

                b.ToTable("ReInspectionNotifications", "FireOccupancy");
            });

            modelBuilder.Entity("EnerGov.Business.Identity.Roles.Role", b => {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd();

                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(1000);

                b.Property<bool>("IsActive");

                b.Property<string>("RoleName")
                    .IsRequired()
                    .HasMaxLength(100);

                b.HasKey("Id");

                b.ToTable("Roles", "Identity");
            });

            modelBuilder.Entity("EnerGov.Business.Identity.Roles.RolePermission", b => {
                b.Property<Guid>("RoleId");

                b.Property<string>("PermissionName")
                    .HasMaxLength(200);

                b.HasKey("RoleId", "PermissionName");

                b.ToTable("RolePermissions", "Identity");
            });

            modelBuilder.Entity("EnerGov.Business.Identity.Users.User", b => {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd();

                b.Property<string>("EmailAddress")
                    .IsRequired()
                    .HasMaxLength(255);

                b.Property<string>("FirstName")
                    .IsRequired()
                    .HasMaxLength(100);

                b.Property<bool>("IsActive");

                b.Property<string>("LastName")
                    .IsRequired()
                    .HasMaxLength(200);

                b.Property<string>("UserName")
                    .IsRequired()
                    .HasMaxLength(100);

                b.Property<string>("WindowsSid")
                    .IsRequired()
                    .HasMaxLength(100);

                b.HasKey("Id");

                b.HasAlternateKey("WindowsSid");

                b.ToTable("Users", "Identity");
            });

            modelBuilder.Entity("EnerGov.Business.Identity.Users.UserRole", b => {
                b.Property<Guid>("UserId");

                b.Property<Guid>("RoleId");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("UserRoles", "Identity");
            });

            modelBuilder.Entity("EnerGov.Business.UtilityExcavation.UtilityCustomers.UtilityCustomer", b => {
                b.Property<Guid>("EnerGovGlobalEntityId")
                    .ValueGeneratedOnAdd();

                b.Property<string>("CustomerName")
                    .IsRequired()
                    .HasMaxLength(250);

                b.Property<bool>("IsActive");

                b.HasKey("EnerGovGlobalEntityId");

                b.ToTable("UtilityCustomers", "UtilityExcavation");
            });

            modelBuilder.Entity("EnerGov.Business.UtilityExcavation.UtilityFeeGLAccounts.UtilityFeeGLAccount", b => {
                b.Property<Guid>("EnerGovFeeId");

                b.Property<Guid>("EnerGovPickListItemId");

                b.Property<string>("MunisExpenseAccountObject")
                    .IsRequired()
                    .HasMaxLength(6);

                b.Property<string>("MunisExpenseAccountOrg")
                    .IsRequired()
                    .HasMaxLength(7);

                b.Property<string>("MunisExpenseAccountProject")
                    .IsRequired()
                    .HasMaxLength(5);

                b.Property<string>("MunisExpenseCashAccountObject")
                    .IsRequired()
                    .HasMaxLength(6);

                b.Property<string>("MunisExpenseCashAccountOrg")
                    .IsRequired()
                    .HasMaxLength(7);

                b.Property<string>("MunisRevenueAccountObject")
                    .IsRequired()
                    .HasMaxLength(6);

                b.Property<string>("MunisRevenueAccountOrg")
                    .IsRequired()
                    .HasMaxLength(7);

                b.Property<string>("MunisRevenueAccountProject")
                    .IsRequired()
                    .HasMaxLength(5);

                b.Property<string>("MunisRevenueCashAccountObject")
                    .IsRequired()
                    .HasMaxLength(6);

                b.Property<string>("MunisRevenueCashAccountOrg")
                    .IsRequired()
                    .HasMaxLength(7);

                b.HasKey("EnerGovFeeId", "EnerGovPickListItemId");

                b.ToTable("UtilityFeeGLAccounts", "UtilityExcavation");
            });

            modelBuilder.Entity("EnerGov.Services.Email.Models.Email", b => {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd();

                b.Property<string>("BodyHtml");

                b.Property<string>("BodyText");

                b.Property<string>("EmailName")
                    .IsRequired()
                    .HasMaxLength(100);

                b.Property<int>("EmailType");

                b.Property<string>("FromAddress")
                    .IsRequired()
                    .HasMaxLength(255);

                b.Property<string>("Subject")
                    .IsRequired()
                    .HasMaxLength(500);

                b.HasKey("Id");

                b.ToTable("Emails", "Emails");
            });

            modelBuilder.Entity("EnerGov.Services.Email.Models.EmailAttachment", b => {
                b.Property<Guid>("EmailId");

                b.Property<string>("FileName")
                    .HasMaxLength(60);

                b.Property<byte[]>("FileContents");

                b.Property<string>("MimeType")
                    .IsRequired()
                    .HasMaxLength(255);

                b.HasKey("EmailId", "FileName");

                b.ToTable("EmailAttachments", "Emails");
            });

            modelBuilder.Entity("EnerGov.Services.Email.Models.EmailRecipient", b => {
                b.Property<Guid>("EmailId");

                b.Property<string>("ToAddress")
                    .HasMaxLength(255);

                b.Property<DateTime?>("DateSent");

                b.Property<string>("FailureAddress")
                    .HasMaxLength(255);

                b.Property<DateTime?>("LastSendAttemptDate");

                b.Property<int>("SendFailureCount");

                b.HasKey("EmailId", "ToAddress");

                b.ToTable("EmailRecipients", "Emails");
            });

            modelBuilder.Entity("EnerGov.Business.FireOccupancy.InspectionAutomations.Models.InspectionEmail", b => {
                b.HasOne("EnerGov.Services.Email.Models.Email", "Email")
                    .WithMany()
                    .HasForeignKey("EmailId")
                    .OnDelete(DeleteBehavior.Cascade);

                b.HasOne("EnerGov.Business.FireOccupancy.InspectionAutomations.Models.Inspection", "Inspection")
                    .WithMany("Emails")
                    .HasForeignKey("InspectionId", "RowVersion")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("EnerGov.Business.FireOccupancy.InspectionAutomations.Models.InspectionFollowUp", b => {
                b.HasOne("EnerGov.Business.FireOccupancy.InspectionAutomations.Models.Inspection", "Inspection")
                    .WithMany("InspectionFollowUps")
                    .HasForeignKey("InspectionId", "RowVersion")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("EnerGov.Business.FireOccupancy.InspectionAutomations.Models.ReInspection", b => {
                b.HasOne("EnerGov.Business.FireOccupancy.InspectionAutomations.Models.Inspection", "Inspection")
                    .WithMany("ReInspections")
                    .HasForeignKey("InspectionId", "RowVersion")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("EnerGov.Business.Identity.Roles.RolePermission", b => {
                b.HasOne("EnerGov.Business.Identity.Roles.Role", "Role")
                    .WithMany("RolePermissions")
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("EnerGov.Business.Identity.Users.UserRole", b => {
                b.HasOne("EnerGov.Business.Identity.Roles.Role", "Role")
                    .WithMany("UserRoles")
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade);

                b.HasOne("EnerGov.Business.Identity.Users.User", "User")
                    .WithMany("UserRoles")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("EnerGov.Services.Email.Models.EmailAttachment", b => {
                b.HasOne("EnerGov.Services.Email.Models.Email", "Email")
                    .WithMany("Attachments")
                    .HasForeignKey("EmailId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("EnerGov.Services.Email.Models.EmailRecipient", b => {
                b.HasOne("EnerGov.Services.Email.Models.Email", "Email")
                    .WithMany("Recipients")
                    .HasForeignKey("EmailId")
                    .OnDelete(DeleteBehavior.Cascade);
            });
#pragma warning restore 612, 618
        }
    }
}
