CREATE PROCEDURE [reviewcoordinator].[USP_ENTITY_CASE_SEARCH]
	@ASSIGNEDUSERIDS AS RECORDIDS READONLY,
	@TEAMMEMBERIDS AS RECORDIDS READONLY,
	@FILTER_BY_USER_AND_TEAM as bit = 0,
	@TODAY AS DATE = NULL,
	@YESTERDAY AS DATE = NULL,
	@LASTBUSINESSDAY AS DATE = NULL,
	@CUSTOMBEGIN AS DATE = NULL,
	@CUSTOMEND AS DATE = NULL,
	@TYPEIDS AS RECORDIDS READONLY,
	@STATUSIDS AS RECORDIDS READONLY,
	@PROJECTIDS AS RECORDIDS READONLY,
	@ENTITYIDS AS RECORDIDS READONLY,
	@ALLOWHOLDOVERRIDE BIT,
	@PAGE_NUMBER AS INT = 1,
	@PAGE_SIZE AS INT = 10,
	@IS_ASCENDING AS BIT = 1
AS
BEGIN

SET NOCOUNT ON;
WITH RAW_DATA AS 
(
	(SELECT *, 
	CASE @IS_ASCENDING WHEN 1 THEN
			ROW_NUMBER() OVER(ORDER BY APPLIEDDATE)
		ELSE
			ROW_NUMBER() OVER(ORDER BY APPLIEDDATE DESC)
		END AS RowNumber,
		COUNT(1) OVER() AS TotalRows
	FROM (
	SELECT		
		PMPERMIT.PMPERMITID ENTITYID,
		PMPERMIT.PERMITNUMBER ENTITYNUMBER,
		PMPERMIT.DESCRIPTION ENTITYDESCRIPTION,
		PMPERMIT.PMPERMITTYPEID ENTITYTYPEID,
		PMPERMITTYPE.NAME ENTITYTYPE,
		PMPERMITWORKCLASS.NAME ENTITYWORKCLASS,
		PMPERMITSTATUS.PMPERMITSTATUSID ENTITYSTATUSID,
		PMPERMITSTATUS.NAME ENTITYSTATUS,
		PMPERMIT.APPLYDATE APPLIEDDATE,
		PRPROJECT.PRPROJECTID PROJECTID,
		PRPROJECT.NAME PROJECTNAME,
		PMPERMIT.ROWVERSION ROWVERSION,		
		PARCEL.PARCELNUMBER MAINPARCEL,
		2 MODULE,
		DISTRICT.NAME DISTRICTNAME,
		PMPERMIT.ISSUEDATE ISSUEDDATE,
		PMPERMIT.EXPIREDATE EXPIREDATE,
		PMPERMIT.SQUAREFEET SQUAREFEET,
		PMPERMIT.VALUE VALUATIONVALUE,
		HASACTIVESTOPHOLDS = [reviewcoordinator].UFN_HAS_ACTIVE_STOP_HOLDS(PMPERMIT.PMPERMITID, @ALLOWHOLDOVERRIDE),		
		PMPERMIT.ASSIGNEDTO ASSIGNEDTO,		
		USERS.FNAME ASSIGNTOFIRSTNAME,
		USERS.LNAME ASSIGNEDTOLASTNAME,
		PMPERMITADDRESS.MAILINGADDRESSID MAILINGADDRESSID,
		PMPERMIT.FINALIZEDATE COMPLETEDATE
	FROM PMPERMIT	
	INNER JOIN PMPERMITSTATUS ON PMPERMITSTATUS.PMPERMITSTATUSID = PMPERMIT.PMPERMITSTATUSID
	INNER JOIN PMPERMITTYPE ON PMPERMITTYPE.PMPERMITTYPEID = PMPERMIT.PMPERMITTYPEID
	INNER JOIN PMPERMITWORKCLASS ON PMPERMITWORKCLASS.PMPERMITWORKCLASSID = PMPERMIT.PMPERMITWORKCLASSID
	INNER JOIN USERS ON USERS.SUSERGUID = PMPERMIT.ASSIGNEDTO
	LEFT OUTER JOIN PRPROJECTPERMIT ON PRPROJECTPERMIT.PMPERMITID = PMPERMIT.PMPERMITID
	LEFT OUTER JOIN PRPROJECT ON PRPROJECT.PRPROJECTID = PRPROJECTPERMIT.PRPROJECTID	
	LEFT OUTER JOIN PMPERMITPARCEL ON PMPERMITPARCEL.PMPERMITID = PMPERMIT.PMPERMITID AND PMPERMITPARCEL.MAIN = 1
	LEFT OUTER JOIN PARCEL ON PARCEL.PARCELID = PMPERMITPARCEL.PARCELID
	LEFT OUTER JOIN PMPERMITADDRESS ON PMPERMITADDRESS.PMPERMITID = PMPERMIT.PMPERMITID AND PMPERMITADDRESS.MAIN = 1
	LEFT OUTER JOIN DISTRICT ON DISTRICT.DISTRICTID = PMPERMIT.DISTRICTID
	UNION ALL
	SELECT		
		PLPLAN.PLPLANID ENTITYID,
		PLPLAN.PLANNUMBER ENTITYNUMBER,
		PLPLAN.DESCRIPTION ENTITYDESCRIPTION,
		PLPLAN.PLPLANTYPEID ENTITYTYPEID,
		PLPLANTYPE.PLANNAME ENTITYTYPE,
		PLPLANWORKCLASS.NAME ENTITYWORKCLASS,
		PLPLANSTATUS.PLPLANSTATUSID ENTITYSTATUSID,
		PLPLANSTATUS.NAME ENTITYSTATUS,
		PLPLAN.APPLICATIONDATE APPLIEDDATE,
		PRPROJECT.PRPROJECTID PROJECTID,
		PRPROJECT.NAME PROJECTNAME,
		PLPLAN.ROWVERSION ROWVERSION,		
		PARCEL.PARCELNUMBER MAINPARCEL,
		1 MODULE,
		DISTRICT.NAME DISTRICTNAME,
		NULL ISSUEDDATE,
		PLPLAN.EXPIREDATE,
		PLPLAN.SQUAREFEET SQUAREFEET,
		PLPLAN.VALUE VALUATIONVALUE,
		HASACTIVESTOPHOLDS = [reviewcoordinator].UFN_HAS_ACTIVE_STOP_HOLDS(PLPLAN.PLPLANID, @ALLOWHOLDOVERRIDE),		
		PLPLAN.ASSIGNEDTO ASSIGNEDTO,		
		USERS.FNAME ASSIGNTOFIRSTNAME,
		USERS.LNAME ASSIGNEDTOLASTNAME,
		PLPLANADDRESS.MAILINGADDRESSID MAILINGADDRESSID,
		PLPLAN.COMPLETEDATE COMPLETEDATE
	FROM PLPLAN	
	INNER JOIN PLPLANSTATUS ON PLPLANSTATUS.PLPLANSTATUSID = PLPLAN.PLPLANSTATUSID
	INNER JOIN PLPLANTYPE ON PLPLANTYPE.PLPLANTYPEID = PLPLAN.PLPLANTYPEID
	INNER JOIN PLPLANWORKCLASS ON PLPLANWORKCLASS.PLPLANWORKCLASSID = PLPLAN.PLPLANWORKCLASSID
	INNER JOIN USERS ON USERS.SUSERGUID = PLPLAN.ASSIGNEDTO
	LEFT OUTER JOIN PRPROJECTPLAN ON PRPROJECTPLAN.PLPLANID = PLPLAN.PLPLANID
	LEFT OUTER JOIN PRPROJECT ON PRPROJECT.PRPROJECTID = PRPROJECTPLAN.PRPROJECTID	
	LEFT OUTER JOIN PLPLANPARCEL ON PLPLANPARCEL.PLPLANID = PLPLAN.PLPLANID AND PLPLANPARCEL.MAIN = 1
	LEFT OUTER JOIN PARCEL ON PARCEL.PARCELID = PLPLANPARCEL.PARCELID
	LEFT OUTER JOIN PLPLANADDRESS ON PLPLANADDRESS.PLPLANID = PLPLAN.PLPLANID AND PLPLANADDRESS.MAIN = 1
	LEFT OUTER JOIN DISTRICT ON DISTRICT.DISTRICTID = PLPLAN.DISTRICTID	
) AS QUERY_DATA
	WHERE
	(
	(@FILTER_BY_USER_AND_TEAM = 0 AND
	(ASSIGNEDTO IN (SELECT RECORDID FROM @ASSIGNEDUSERIDS) OR ASSIGNEDTO IN (SELECT RECORDID FROM @TEAMMEMBERIDS)))
	OR 
	(@FILTER_BY_USER_AND_TEAM = 1 AND
	ASSIGNEDTO IN (SELECT RECORDID FROM @ASSIGNEDUSERIDS) AND ASSIGNEDTO IN (SELECT RECORDID FROM @TEAMMEMBERIDS))
	) AND
	COMPLETEDATE IS NULL AND
	(
	@TODAY IS NULL AND @YESTERDAY IS NULL AND @LASTBUSINESSDAY IS NULL AND @CUSTOMBEGIN IS NULL AND @CUSTOMEND IS NULL
	OR
	(	
	(APPLIEDDATE >= @TODAY AND APPLIEDDATE < DATEADD(D, 1, @TODAY)) OR
	(APPLIEDDATE >= @YESTERDAY AND APPLIEDDATE < DATEADD(D, 1, @YESTERDAY)) OR
	(APPLIEDDATE >= @LASTBUSINESSDAY) OR
	(APPLIEDDATE >= @CUSTOMBEGIN AND APPLIEDDATE < DATEADD(D, 1, @CUSTOMEND))
	)
	) AND
	(NOT EXISTS(SELECT * FROM @TYPEIDS) OR ENTITYTYPEID IN (SELECT RECORDID FROM @TYPEIDS)) AND
	(NOT EXISTS(SELECT * FROM @PROJECTIDS) OR ISNULL(PROJECTID,'') IN (SELECT ISNULL(RECORDID,'') FROM @PROJECTIDS)) AND
	(NOT EXISTS(SELECT * FROM @STATUSIDS) OR ENTITYSTATUSID IN (SELECT RECORDID FROM @STATUSIDS)) AND
	(NOT EXISTS(SELECT * FROM @ENTITYIDS) OR ENTITYID IN (SELECT RECORDID FROM @ENTITYIDS))
) )
SELECT * 
INTO #RESULT
FROM RAW_DATA 
WHERE
	RowNumber > @PAGE_SIZE * (@PAGE_NUMBER - 1) AND 
	RowNumber <= @PAGE_SIZE * @PAGE_NUMBER

SELECT * FROM #RESULT ORDER BY RowNumber

DECLARE @RESULT_ENTITYIDS RECORDIDS
INSERT INTO @RESULT_ENTITYIDS SELECT DISTINCT ENTITYID FROM #RESULT

exec [reviewcoordinator].[USP_ADDRESS_GETBYENTITYIDS] @ENTITYIDS=@RESULT_ENTITYIDS
exec [reviewcoordinator].[USP_ENTITY_CASE_BILLING_CONTACTS_GETBYENTITYIDS] @ENTITYIDS=@RESULT_ENTITYIDS
exec [reviewcoordinator].[USP_ENTITY_CASE_GISFEATURE_GETBYENTITYIDS] @ENTITYIDS=@RESULT_ENTITYIDS

END