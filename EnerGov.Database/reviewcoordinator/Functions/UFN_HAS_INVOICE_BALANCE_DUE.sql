CREATE FUNCTION [reviewcoordinator].[UFN_HAS_INVOICE_BALANCE_DUE]
(
	@ENTITYID CHAR(36)
)
RETURNS BIT
AS
BEGIN
DECLARE @statusdeleted INT = 10
DECLARE @statusVoid INT = 5
DECLARE @hasInvoiceBalanceDue BIT = 0

;WITH balance_due AS (
	SELECT SUM(CACOMPUTEDFEE.COMPUTEDAMOUNT - CACOMPUTEDFEE.AMOUNTPAIDTODATE) BALANCE	
	FROM PMPERMITFEE
	INNER JOIN CACOMPUTEDFEE ON CACOMPUTEDFEE.CACOMPUTEDFEEID = PMPERMITFEE.CACOMPUTEDFEEID
	INNER JOIN CAINVOICEFEE ON CAINVOICEFEE.CACOMPUTEDFEEID = CACOMPUTEDFEE.CACOMPUTEDFEEID
	INNER JOIN CAINVOICE ON CAINVOICE.CAINVOICEID = CAINVOICEFEE.CAINVOICEID
	WHERE PMPERMITFEE.PMPERMITID = @ENTITYID AND 
	CACOMPUTEDFEE.CASTATUSID NOT IN (@statusdeleted, @statusVoid)
	AND (CACOMPUTEDFEE.COMPUTEDAMOUNT - CACOMPUTEDFEE.AMOUNTPAIDTODATE) > 0
	AND CAINVOICE.CASTATUSID NOT IN (@statusdeleted, @statusVoid)

	UNION ALL

	SELECT SUM(CACOMPUTEDFEE.COMPUTEDAMOUNT - CACOMPUTEDFEE.AMOUNTPAIDTODATE) BALANCE	
	FROM PLPLANFEE
	INNER JOIN CACOMPUTEDFEE ON CACOMPUTEDFEE.CACOMPUTEDFEEID = PLPLANFEE.CACOMPUTEDFEEID
	INNER JOIN CAINVOICEFEE ON CAINVOICEFEE.CACOMPUTEDFEEID = CACOMPUTEDFEE.CACOMPUTEDFEEID
	INNER JOIN CAINVOICE ON CAINVOICE.CAINVOICEID = CAINVOICEFEE.CAINVOICEID
	WHERE PLPLANFEE.PLPLANID = @ENTITYID AND 
	CACOMPUTEDFEE.CASTATUSID NOT IN (@statusdeleted, @statusVoid)
	AND (CACOMPUTEDFEE.COMPUTEDAMOUNT - CACOMPUTEDFEE.AMOUNTPAIDTODATE) > 0
	AND CAINVOICE.CASTATUSID NOT IN (@statusdeleted, @statusVoid)
) SELECT @hasInvoiceBalanceDue = CASE WHEN SUM(BALANCE) > 0 THEN 1 ELSE 0 END FROM balance_due

RETURN @hasInvoiceBalanceDue
END