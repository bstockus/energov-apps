

CREATE PROCEDURE [SP_COPY_PERMITS]
(
	@PMPERMITID CHAR(36),
	@PERMITNUMBER NVARCHAR(50),
	@ADDRESSIDS VARCHAR(MAX) = NULL,
	@NUMBEROFCOPY INT,
	@AUTONUMBERFORMAT NVARCHAR(50)
)
AS
BEGIN

	DECLARE @COUNT INT
	DECLARE @PERMITIDS VARCHAR(MAX)
	DECLARE @PERMITNUMBERS VARCHAR(MAX)
	DECLARE @ONEPERMITNUMBER VARCHAR(50)
	DECLARE @ONEPERMITID CHAR(36)
	DECLARE @ORIGINALPERMITID CHAR(36)
	DECLARE @COUNTLENOFNEXTNUMBER INT
	DECLARE @TEMPNEXTNUMBER VARCHAR(20)
	DECLARE @NEXTNUMBER VARCHAR(20)
	DECLARE @MINNEXTNUMBER INT
	DECLARE @MAXNEXTNUMBER INT
	DECLARE @UNIQUEADDRESSES VARCHAR(MAX)
	DECLARE @USECASETYPENUMBERING BIT
	DECLARE @ORIGIANLTYPEID CHAR(36)
	DECLARE @CURRENTIVRNUMBER VARCHAR(20)
	DECLARE @IVRPADDINGNUMBER INT

	DECLARE @erUPLOADFOLDER AS VARCHAR(110);
	DECLARE @erNEWNEXTVALUE AS VARCHAR(50);
	DECLARE @erFORMATSTRING AS VARCHAR(50);
	DECLARE @erPADWITHZEROSTOLENGTH INT;
	DECLARE @erNEXTVALUE INT;

	SET @PERMITIDS = '';
	SET @COUNT = 0;
	SET @ONEPERMITID = '';
	SET @ORIGINALPERMITID = @PMPERMITID;
	SET @TEMPNEXTNUMBER = '';
	SET @COUNTLENOFNEXTNUMBER =( SELECT LEN(@AUTONUMBERFORMAT)-LEN(REPLACE(@AUTONUMBERFORMAT,'?','')));
	SET @UNIQUEADDRESSES = @ADDRESSIDS;

	SELECT @USECASETYPENUMBERING = PMPERMITTYPE.USECASETYPENUMBERING, @ORIGIANLTYPEID = PMPERMITTYPE.PMPERMITTYPEID
		FROM PMPERMITTYPE
		INNER JOIN PMPERMIT ON PMPERMIT.PMPERMITTYPEID = PMPERMITTYPE.PMPERMITTYPEID
		WHERE PMPERMIT.PMPERMITID = @ORIGINALPERMITID

	--SET @MINNEXTNUMBER = (SELECT AUTONUMBERSETTINGS.NEXTVALUE From AUTONUMBERSETTINGS 
	--	WHERE AUTONUMBERSETTINGS.CLASSNAME = '[dbo].[GetAndUpdateAutoNumber] ''');
		
      DECLARE @Results TABLE(PermitID char(36),PermitNumber varchar(255))           
            
	--UPDATE AUTONUMBERSETTINGS SET NEXTVALUE = NEXTVALUE + @NUMBEROFCOPY
	--	WHERE AUTONUMBERSETTINGS.CLASSNAME = 'EnerGovBusiness.PermitManagement.Permit';
      --COMMIT
	
	SET @IVRPADDINGNUMBER = (SELECT AUTONUMBERSETTINGS.PADWITHZEROSTOLENGTH From AUTONUMBERSETTINGS 
		WHERE AUTONUMBERSETTINGS.CLASSNAME = 'PermitIVRNumber');

	DECLARE @TEMPAUTONUMBERTABLE TABLE
		(
			[CLASSNAME] [nvarchar](250) NOT NULL,
			[FORMATSTRING] [nvarchar](50) NOT NULL,
			[PADWITHZEROSTOLENGTH] [int] NOT NULL,
			[NEXTVALUE] [int] NOT NULL,
			[USERESET] [INT] NULL,
			[LASTRESET] [DATETIME] NULL
		)

	SET XACT_ABORT ON

	WHILE (@COUNT < @COUNTLENOFNEXTNUMBER)
	BEGIN
		SET @TEMPNEXTNUMBER = @TEMPNEXTNUMBER + '?';
		SET @COUNT = @COUNT + 1;
	END
	
	SET @COUNT = 0;
	WHILE (@COUNT < @NUMBEROFCOPY)
	BEGIN
		IF @USECASETYPENUMBERING = 1
		BEGIN
			INSERT INTO @TEMPAUTONUMBERTABLE EXEC  [dbo].[GETANDUPDATEAUTONUMBER] @ORIGIANLTYPEID
		END
		ELSE
		BEGIN
			INSERT INTO @TEMPAUTONUMBERTABLE EXEC  [dbo].[GETANDUPDATEAUTONUMBER] 'EnerGovBusiness.PermitManagement.Permit'
		END

		SELECT TOP 1 @MINNEXTNUMBER = NEXTVALUE
		FROM @TEMPAUTONUMBERTABLE

		DELETE FROM @TEMPAUTONUMBERTABLE

		SET @ONEPERMITID = NEWID();	
		SET @PERMITNUMBER = @AUTONUMBERFORMAT;
		SET @NEXTNUMBER = CONVERT(NVARCHAR(20), @MINNEXTNUMBER);
		WHILE (LEN(@NEXTNUMBER) < LEN(@TEMPNEXTNUMBER))
		BEGIN
			SET @NEXTNUMBER = '0' + @NEXTNUMBER;
		END

		SET @ONEPERMITNUMBER = REPLACE(@PERMITNUMBER, @TEMPNEXTNUMBER, @NEXTNUMBER);
		
		--SET @CURRENTIVRNUMBER = (SELECT AUTONUMBERSETTINGS.NEXTVALUE From AUTONUMBERSETTINGS 
		--WHERE AUTONUMBERSETTINGS.CLASSNAME = 'PermitIVRNumber');

		INSERT INTO @TEMPAUTONUMBERTABLE EXEC  [dbo].[GetAndUpdateAutoNumber] 'PermitIVRNumber'
		SELECT TOP 1 @CURRENTIVRNUMBER = NEXTVALUE
		FROM @TEMPAUTONUMBERTABLE

		DELETE FROM @TEMPAUTONUMBERTABLE

		-- SET IVR NUMBER
		WHILE (LEN(@CURRENTIVRNUMBER) < @IVRPADDINGNUMBER)
		BEGIN
			SET @CURRENTIVRNUMBER = '0' + @CURRENTIVRNUMBER;
			--SELECT @CURRENTIVRNUMBER;
		END


		SET @PERMITIDS = @PERMITIDS + @ONEPERMITID + ':' + @ONEPERMITNUMBER + ';'
            INSERT INTO @Results VALUES(@ONEPERMITID,@ONEPERMITNUMBER)

		-- INSERT Main Permit info
		SELECT * INTO #tempPERMIT FROM PMPERMIT WHERE PMPERMIT.PMPERMITID = @ORIGINALPERMITID;
		UPDATE #tempPERMIT SET PMPERMITID = @ONEPERMITID, PERMITNUMBER = @ONEPERMITNUMBER, IVRNUMBER = @CURRENTIVRNUMBER;
		INSERT INTO PMPERMIT SELECT * FROM #tempPERMIT;
		DROP TABLE #tempPERMIT;

		/*CWH 02/27/2014 - Bug 4830 / TFS Bug 2750:Copied permits don't have any history logged*/
		SELECT * INTO #tempHISTORYPERMITMANAGEMENT FROM HISTORYPERMITMANAGEMENT WHERE HISTORYPERMITMANAGEMENT.ID = @ORIGINALPERMITID;
		UPDATE #tempHISTORYPERMITMANAGEMENT SET ID = @ONEPERMITID;
		UPDATE #tempHISTORYPERMITMANAGEMENT SET [ADDITIONALINFO] = 'Permit (' + @CURRENTIVRNUMBER + ')'
		INSERT INTO HISTORYPERMITMANAGEMENT ([ID], [ROWVERSION], [CHANGEDON], [CHANGEDBY], [FIELDNAME], [OLDVALUE], [NEWVALUE], [ADDITIONALINFO])
		SELECT [ID], [ROWVERSION], [CHANGEDON], [CHANGEDBY], [FIELDNAME], [OLDVALUE], [NEWVALUE], [ADDITIONALINFO] FROM #tempHISTORYPERMITMANAGEMENT
		DROP TABLE #tempHISTORYPERMITMANAGEMENT;

		--SET @CURRENTIVRNUMBER =	@CURRENTIVRNUMBER + 1;
		--UPDATE AUTONUMBERSETTINGS SET NEXTVALUE = @CURRENTIVRNUMBER
		--	WHERE AUTONUMBERSETTINGS.CLASSNAME = 'PermitIVRNumber';

		-- INSERT Permit Project
		SELECT * INTO #tempPROJECT FROM PRPROJECTPERMIT WHERE PRPROJECTPERMIT.PMPERMITID = @ORIGINALPERMITID;
		UPDATE #tempPROJECT SET PRPROJECTPERMITID = NEWID(), PMPERMITID = @ONEPERMITID;
		INSERT INTO PRPROJECTPERMIT SELECT * FROM #tempPROJECT;
		DROP TABLE #tempPROJECT;

		-- INSERT Squre Feet
		SELECT * INTO #tempSQUAREFEET FROM PMPERMITDIMENSION WHERE PMPERMITDIMENSION.PMPERMITID = @ORIGINALPERMITID;
		UPDATE #tempSQUAREFEET SET PMPERMITDIMENSIONID = NEWID(), PMPERMITID = @ONEPERMITID;
		INSERT INTO PMPERMITDIMENSION SELECT * FROM #tempSQUAREFEET;
		DROP TABLE #tempSQUAREFEET;

		-- INSERT Valuations
		SELECT * INTO #tempVALUATION FROM PMPERMITVALUATION WHERE PMPERMITVALUATION.PMPERMITID = @ORIGINALPERMITID;
		UPDATE #tempVALUATION SET PMPERMITVALUATIONID = NEWID(), PMPERMITID = @ONEPERMITID;
		INSERT INTO PMPERMITVALUATION SELECT * FROM #tempVALUATION;
		DROP TABLE #tempVALUATION;
		
		-- INSERT NOTE
			
		SELECT * INTO #tempNOTE FROM PMPERMITNOTE WHERE PMPERMITNOTE.PMPERMITID = @ORIGINALPERMITID;
		UPDATE #tempNOTE SET PMPERMITID = @ONEPERMITID, PMPERMITNOTEID = NEWID();
		INSERT INTO PMPERMITNOTE SELECT * FROM #tempNOTE;
		DROP TABLE #tempNOTE;
		
		-- INSERT Contacts
		
		SELECT * INTO #tempCONTACT FROM PMPERMITCONTACT WHERE PMPERMITCONTACT.PMPERMITID = @ORIGINALPERMITID;
		UPDATE #tempCONTACT SET PMPERMITCONTACTID = NEWID(), PMPERMITID = @ONEPERMITID;
		INSERT INTO PMPERMITCONTACT SELECT * FROM #tempCONTACT;
		DROP TABLE #tempCONTACT;
		
		-- INSERT Zones

		SELECT * INTO #tempZONE FROM PMPERMITZONE WHERE PMPERMITZONE.PMPERMITID = @ORIGINALPERMITID;
		UPDATE #tempZONE SET PMPERMITZONEID = NEWID(), PMPERMITID = @ONEPERMITID;
		INSERT INTO PMPERMITZONE SELECT * FROM #tempZONE;
		DROP TABLE #tempZONE;
		
		-- INSERT GIS Features
			
		SELECT * INTO #tempGISFEATURE FROM PMPERMITGISFEATURE WHERE PMPERMITGISFEATURE.PMPERMITID = @ORIGINALPERMITID;
		UPDATE #tempGISFEATURE SET PMPERMITGISFEATUREID = NEWID(), PMPERMITID = @ONEPERMITID;
		INSERT INTO PMPERMITGISFEATURE SELECT * FROM #tempGISFEATURE;
		DROP TABLE #tempGISFEATURE;
		
		-- INSERT Holds
			
		SELECT * INTO #tempHOLD FROM PMPERMITHOLD WHERE PMPERMITHOLD.PMPERMITID = @ORIGINALPERMITID;
		-- update hold origin for the holds with origin as copy source permitid
		UPDATE #tempHOLD SET ORIGIN = @ONEPERMITID, ORIGINNUMBER = @ONEPERMITNUMBER
		WHERE ORIGIN = @PMPERMITID;
		
		UPDATE #tempHOLD SET PMPERMITHOLDID = NEWID(), PMPERMITID = @ONEPERMITID;

		INSERT INTO PMPERMITHOLD SELECT * FROM #tempHOLD;
		DROP TABLE #tempHOLD;
		
		-- INSERT Time Track Entry

		SELECT * INTO #tempTIMETRACKING FROM TIMETRACKING WHERE TIMETRACKING.PRIMARYRECORDID = @ORIGINALPERMITID;
		UPDATE #tempTIMETRACKING SET TIMETRACKINGID = NEWID(), PRIMARYRECORDID = @ONEPERMITID;
		INSERT INTO TIMETRACKING SELECT * FROM #tempTIMETRACKING;
		DROP TABLE #tempTIMETRACKING;

		-- INSERT Permit Objects

		SELECT * INTO #tempOBJECTS FROM PMPERMITOBJECT WHERE PMPERMITOBJECT.PMPERMITID = @ORIGINALPERMITID;
		UPDATE #tempOBJECTS SET PMPERMITOBJECTID = NEWID(), PMPERMITID = @ONEPERMITID;
		INSERT INTO PMPERMITOBJECT SELECT * FROM #tempOBJECTS;
		DROP TABLE #tempOBJECTS;

		-- INSERT Permit Impact Units
		
		SELECT * INTO #tempIMPACTUNITS FROM PMPERMITIMPACTUNIT WHERE PMPERMITIMPACTUNIT.PMPERMITID = @ORIGINALPERMITID;
		UPDATE #tempIMPACTUNITS SET PMPERMITIMPACTUNITID = NEWID(), PMPERMITID = @ONEPERMITID;
		INSERT INTO PMPERMITIMPACTUNIT SELECT * FROM #tempIMPACTUNITS;
		DROP TABLE #tempIMPACTUNITS;

		-- INSERT Addresses		
			
		IF (LEN(@UNIQUEADDRESSES) > 0)
		BEGIN
			-- UNIQUE ADDRESS OPTION
			DECLARE @TEMPMAILINGADDRESS VARCHAR(100);
			DECLARE @TEMPPARCELADDRESSID VARCHAR(100);
			DECLARE @TEMPPERMITPARCELID CHAR(36);

			SET @TEMPMAILINGADDRESS = LEFT(@UNIQUEADDRESSES, CHARINDEX(';',@UNIQUEADDRESSES,0));
			SET @UNIQUEADDRESSES = RIGHT(@UNIQUEADDRESSES, LEN(@UNIQUEADDRESSES) - LEN(@TEMPMAILINGADDRESS));
			SET @TEMPMAILINGADDRESS = REPLACE(@TEMPMAILINGADDRESS,';','');

			SET @TEMPPARCELADDRESSID = 
			(SELECT MA.PARCELID 
			FROM PARCELADDRESS PA 
			INNER JOIN MAILINGADDRESS MA ON PA.ADDRESSID = MA.ADDRESSID
			INNER JOIN PMPERMITADDRESS PAD ON PAD.MAILINGADDRESSID = MA.MAILINGADDRESSID
			WHERE PAD.PMPERMITID = @ORIGINALPERMITID AND PAD.MAILINGADDRESSID = @TEMPMAILINGADDRESS);
			-- select the permitparcelid which is the only unique value if same address are copied since the parcelid selected in the above query will have multiple records in the permitparcel table
			SET @TEMPPERMITPARCELID = (SELECT TOP 1 PMPERMITPARCELID FROM PMPERMITPARCEL WHERE PARCELID = @TEMPPARCELADDRESSID AND PMPERMITID = @ORIGINALPERMITID)

			UPDATE PMPERMITADDRESS 
			SET PMPERMITADDRESS.PMPERMITID = @ONEPERMITID, PMPERMITADDRESS.MAIN = 1 WHERE PMPERMITADDRESS.PMPERMITID = @ORIGINALPERMITID AND PMPERMITADDRESS.MAILINGADDRESSID = @TEMPMAILINGADDRESS;

			IF (@TEMPPARCELADDRESSID IS NOT NULL) AND (LEN(@TEMPPARCELADDRESSID) > 0)
			BEGIN
			-- if the record exists it has to be updated with the new permid id, fixed for bug EM-2081
			IF EXISTS(SELECT 1 FROM PMPERMITPARCEL WHERE PMPERMITPARCEL.PMPERMITPARCELID = @TEMPPERMITPARCELID)
				BEGIN
					UPDATE PMPERMITPARCEL 
					SET PMPERMITPARCEL.PMPERMITID = @ONEPERMITID, PMPERMITPARCEL.MAIN = 1 WHERE PMPERMITPARCEL.PMPERMITPARCELID = @TEMPPERMITPARCELID
				END
			ELSE
				BEGIN
					INSERT INTO PMPERMITPARCEL (PMPERMITPARCELID, PMPERMITID, PARCELID, MAIN, PARCELSPLITPROCESS) 
					VALUES (NEWID(), @ONEPERMITID, @TEMPPARCELADDRESSID, 1, 0);
				END
			END
				
		END
		ELSE
		BEGIN
			-- INSERT Parcels
			SELECT * INTO #tempPARCEL FROM PMPERMITPARCEL WHERE PMPERMITPARCEL.PMPERMITID = @ORIGINALPERMITID;
			UPDATE #tempPARCEL SET PMPERMITPARCELID = NEWID(), PMPERMITID = @ONEPERMITID;
			INSERT INTO PMPERMITPARCEL SELECT * FROM #tempPARCEL;
			DROP TABLE #tempPARCEL;

			-- COPY ALL ADDRESS OPTION
		
			SELECT MAILINGADDRESS.* INTO #tempADDRESS
			FROM MAILINGADDRESS
			INNER JOIN PMPERMITADDRESS TABLEB ON TABLEB.MAILINGADDRESSID = MAILINGADDRESS.MAILINGADDRESSID
			WHERE PMPERMITID = @ORIGINALPERMITID;
			
			SELECT *, NEWID() AS NEWADDRESSID INTO #tempPERMITADDRESSXREF FROM PMPERMITADDRESS 
			WHERE PMPERMITID = @ORIGINALPERMITID;
			
			SELECT * INTO #tempPERMITADDRESS
			FROM PMPERMITADDRESS
			WHERE PMPERMITID = @ORIGINALPERMITID;
			
			UPDATE #tempADDRESS SET #tempADDRESS.MAILINGADDRESSID = TABLEA.NEWADDRESSID
			FROM #tempPERMITADDRESSXREF TABLEA WHERE #tempADDRESS.MAILINGADDRESSID = TABLEA.MAILINGADDRESSID;
			
			INSERT INTO MAILINGADDRESS SELECT * FROM #tempADDRESS;
					
			UPDATE #tempPERMITADDRESS
			SET #tempPERMITADDRESS.PMPERMITADDRESSID = NEWID(),
				#tempPERMITADDRESS.MAILINGADDRESSID = XREFADDRESS.NEWADDRESSID,
				#tempPERMITADDRESS.PMPERMITID = @ONEPERMITID
			FROM #tempPERMITADDRESSXREF XREFADDRESS WHERE XREFADDRESS.PMPERMITADDRESSID = #tempPERMITADDRESS.PMPERMITADDRESSID;
			
			INSERT INTO PMPERMITADDRESS SELECT * FROM #tempPERMITADDRESS;
			
			DROP TABLE #tempADDRESS;
			DROP TABLE #tempPERMITADDRESSXREF;
			DROP TABLE #tempPERMITADDRESS;
		
		END

		-- INSERT GISHISTORYQUEUE

		INSERT INTO GISHISTORYQUEUE (GISHISTORYQUEUEID, MODULENAME, CASEID, CASENUMBER, CASETYPE, WORKCLASS, APPLICATIONDATE, PROJECTID, PROJECTNAME, SPATIALTYPE, SPATIALID, ISWRITTENTOGIS,CREATEDATE, PROCESSEDDATE, RESULTLOG, RETRYCOUNT, SENTTOBUS) 
		SELECT NEWID(), MODULENAME, @ONEPERMITID, @ONEPERMITNUMBER, CASETYPE, WORKCLASS, APPLICATIONDATE, PROJECTID, PROJECTNAME, SPATIALTYPE, SPATIALID, 0, GETDATE(), NULL, NULL, NULL, NULL FROM GISHISTORYQUEUE WHERE CASEID = @ORIGINALPERMITID
			
		-- INSERT Conditions
		
		SELECT CONDITION.* INTO #tmpCONDITION
		FROM CONDITION  
		INNER JOIN PMPERMITCONDITION ON CONDITION.CONDITIONID = PMPERMITCONDITION.CONDITIONID
		INNER JOIN PMPERMIT ON PMPERMIT.PMPERMITID = PMPERMITCONDITION.PMPERMITID
		WHERE PMPERMITCONDITION.PMPERMITID = @ORIGINALPERMITID
		
		SELECT CONDITION.*, NEWID() AS NEWCONDITIONID INTO #tmpXREFCONDITION
		FROM CONDITION
		INNER JOIN PMPERMITCONDITION ON CONDITION.CONDITIONID = PMPERMITCONDITION.CONDITIONID
		INNER JOIN PMPERMIT ON PMPERMIT.PMPERMITID = PMPERMITCONDITION.PMPERMITID
		WHERE PMPERMITCONDITION.PMPERMITID = @ORIGINALPERMITID;
		
		UPDATE #tmpCONDITION 
		SET #tmpCONDITION.CONDITIONID = NEWCONDITIONID --Bug 60205: Keep the ORIGIN objects the same as the original 
		FROM #tmpXREFCONDITION TEMPXREFCONDITION WHERE #tmpCONDITION.CONDITIONID = TEMPXREFCONDITION.CONDITIONID;
		
		INSERT INTO CONDITION SELECT * FROM #tmpCONDITION;
		
		SELECT * INTO #tmpPERMITCONDITION FROM PMPERMITCONDITION WHERE PMPERMITID = @ORIGINALPERMITID;
		
		UPDATE #tmpPERMITCONDITION 
		SET #tmpPERMITCONDITION.PMPERMITCONDITIONID = NEWID(),
			#tmpPERMITCONDITION.CONDITIONID = XREFCONDITION.NEWCONDITIONID,
			#tmpPERMITCONDITION.PMPERMITID = @ONEPERMITID
		FROM #tmpXREFCONDITION XREFCONDITION WHERE #tmpPERMITCONDITION.CONDITIONID = XREFCONDITION.CONDITIONID;

		INSERT INTO PMPERMITCONDITION SELECT * FROM #tmpPERMITCONDITION;
		
		DROP TABLE #tmpPERMITCONDITION;
		DROP TABLE #tmpXREFCONDITION;
		DROP TABLE #tmpCONDITION;
		
		-- INSERT Activities
		
		SELECT *, NEWID() AS NEWACTIVITYID INTO #tempACTIVITYXREF FROM PMPERMITACTIVITY 
		WHERE PMPERMITID = @ORIGINALPERMITID;
		
		SELECT * INTO #tempACTIVITY
		FROM PMPERMITACTIVITY
		WHERE PMPERMITID = @ORIGINALPERMITID;
		
		UPDATE #tempACTIVITY 
		SET #tempACTIVITY.PMPERMITACTIVITYID = XREFACTIVITY.NEWACTIVITYID,
			#tempACTIVITY.PMPERMITID = @ONEPERMITID
		FROM #tempACTIVITYXREF XREFACTIVITY WHERE XREFACTIVITY.PMPERMITACTIVITYID = #tempACTIVITY.PMPERMITACTIVITYID;
		
		INSERT INTO PMPERMITACTIVITY SELECT * FROM #tempACTIVITY;
		
		SELECT CUSTOMSAVERPERMITMANAGEMENT.* INTO #tempACTIVITYCUSTOM
		FROM CUSTOMSAVERPERMITMANAGEMENT
		INNER JOIN PMPERMITACTIVITY TABLEB ON TABLEB.PMPERMITACTIVITYID = CUSTOMSAVERPERMITMANAGEMENT.ID
		WHERE PMPERMITID = @ORIGINALPERMITID;
		
		UPDATE #tempACTIVITYCUSTOM SET ID = NEWACTIVITYID
		FROM #tempACTIVITYXREF TABLEA WHERE ID = TABLEA.PMPERMITACTIVITYID;
		
		INSERT INTO CUSTOMSAVERPERMITMANAGEMENT SELECT * FROM #tempACTIVITYCUSTOM;
		
		DROP TABLE #tempACTIVITYCUSTOM;
		DROP TABLE #tempACTIVITYXREF;
		DROP TABLE #tempACTIVITY;
		
		-- INSERT Fees
	
		SELECT CACOMPUTEDFEE.* INTO #tempCOMPUTEDFEE
		FROM CACOMPUTEDFEE
		INNER JOIN PMPERMITFEE TABLEB ON TABLEB.CACOMPUTEDFEEID = CACOMPUTEDFEE.CACOMPUTEDFEEID
		WHERE PMPERMITID = @ORIGINALPERMITID;
		
		SELECT *, NEWID() AS NEWFEEID INTO #tempPERMITFEEXREF FROM PMPERMITFEE 
		WHERE PMPERMITID = @ORIGINALPERMITID;
				
		SELECT * INTO #tempPERMITFEE
		FROM PMPERMITFEE
		WHERE PMPERMITID = @ORIGINALPERMITID;
		
		UPDATE #tempCOMPUTEDFEE SET #tempCOMPUTEDFEE.CACOMPUTEDFEEID = TABLEA.NEWFEEID
		FROM #tempPERMITFEEXREF TABLEA WHERE #tempCOMPUTEDFEE.CACOMPUTEDFEEID = TABLEA.CACOMPUTEDFEEID;
		
		INSERT INTO CACOMPUTEDFEE SELECT * FROM #tempCOMPUTEDFEE;
		
		UPDATE #tempPERMITFEE
		SET #tempPERMITFEE.PMPERMITFEEID = NEWID(),
			#tempPERMITFEE.CACOMPUTEDFEEID = XREFCOMPUTEDFEE.NEWFEEID,
			#tempPERMITFEE.PMPERMITID = @ONEPERMITID
		FROM #tempPERMITFEEXREF XREFCOMPUTEDFEE WHERE XREFCOMPUTEDFEE.PMPERMITFEEID = #tempPERMITFEE.PMPERMITFEEID;
		
		INSERT INTO PMPERMITFEE SELECT * FROM #tempPERMITFEE;

		DROP TABLE #tempCOMPUTEDFEE;
		DROP TABLE #tempPERMITFEEXREF;
		DROP TABLE #tempPERMITFEE;
		
		-- INSERT ERProject

		SELECT * INTO #tmpERPROJECT FROM ERPROJECT WHERE PMPERMITID = @ORIGINALPERMITID;
		INSERT INTO @TEMPAUTONUMBERTABLE EXEC  [dbo].[GetAndUpdateAutoNumber] 'EnerGovBusiness.PlanManagement.EProject'
		SELECT TOP 1 @erFORMATSTRING = FORMATSTRING, @erPADWITHZEROSTOLENGTH = PADWITHZEROSTOLENGTH, @erNEXTVALUE = NEXTVALUE FROM @TEMPAUTONUMBERTABLE WHERE CLASSNAME = 'EnerGovBusiness.PlanManagement.EProject'
		DELETE FROM @TEMPAUTONUMBERTABLE WHERE CLASSNAME = 'EnerGovBusiness.PlanManagement.EProject'

		SET @erNEWNEXTVALUE = CAST(@erNEXTVALUE AS VARCHAR(20));
		WHILE (LEN(@erNEWNEXTVALUE) < @erPADWITHZEROSTOLENGTH)
		BEGIN
			SET @erNEWNEXTVALUE = '0' + @erNEWNEXTVALUE;
		END
		SET @erUPLOADFOLDER = REPLACE(@erFORMATSTRING, '{0}', @erNEWNEXTVALUE);

		UPDATE #tmpERPROJECT 
		SET #tmpERPROJECT.ERPROJECTID = NEWID(),
		    #tmpERPROJECT.ERPROJECTSTATUSID = (SELECT TOP 1 ERPROJECTSTATUSID FROM ERPROJECTSTATUS WHERE ISDEFAULTSTATUS = 1), 
			#tmpERPROJECT.PROJECTNUM = @ONEPERMITNUMBER,
			#tmpERPROJECT.UPLOADFOLDER = @erUPLOADFOLDER,
			#tmpERPROJECT.CREATEDATE = GETDATE(), 
			#tmpERPROJECT.LOCKED = 0, 
			#tmpERPROJECT.ALLOWFILEUPLOAD = 1, 
            #tmpERPROJECT.ROWVERSION = 1, 
			#tmpERPROJECT.LASTCHANGEDON = GETDATE(), 
			#tmpERPROJECT.PMPERMITID = @ONEPERMITID; 

		INSERT INTO ERPROJECT SELECT * FROM #tmpERPROJECT;
		
		DROP TABLE #tmpERPROJECT;

		-- INSERT WORKFLOWs
		
			
		SELECT * INTO #tempWFSTEP FROM PMPERMITWFSTEP WHERE PMPERMITWFSTEP.PMPERMITID = @ORIGINALPERMITID;			
		SELECT PMPERMITWFSTEP.*, NEWID() AS NEWSTEPID INTO #tempWFSTEPXREF FROM PMPERMITWFSTEP WHERE PMPERMITWFSTEP.PMPERMITID = @ORIGINALPERMITID;
		
		SELECT STEPACTION.* INTO #tempWFSTEPACTION 
		FROM PMPERMITWFACTIONSTEP STEPACTION 
		INNER JOIN PMPERMITWFSTEP STEP ON STEPACTION.PMPERMITWFSTEPID = STEP.PMPERMITWFSTEPID
		WHERE STEP.PMPERMITID = @ORIGINALPERMITID;
		
		SELECT STEPACTION.*, NEWID() AS NEWACTIONID INTO #tempWFSTEPACTIONXREF
		FROM PMPERMITWFACTIONSTEP STEPACTION 
		INNER JOIN PMPERMITWFSTEP STEP ON STEPACTION.PMPERMITWFSTEPID = STEP.PMPERMITWFSTEPID
		WHERE STEP.PMPERMITID = @ORIGINALPERMITID;
		
		-- Update the workflow action
		UPDATE #tempWFSTEP
		SET #tempWFSTEP.PMPERMITWFSTEPID = (SELECT NEWSTEPID FROM #tempWFSTEPXREF WHERE #tempWFSTEP.PMPERMITWFSTEPID = #tempWFSTEPXREF.PMPERMITWFSTEPID),
		#tempWFSTEP.PMPERMITWFPARENTSTEPID = (SELECT NEWSTEPID FROM #tempWFSTEPXREF WHERE #tempWFSTEP.PMPERMITWFPARENTSTEPID = #tempWFSTEPXREF.PMPERMITWFSTEPID),
		#tempWFSTEP.PMPERMITID = @ONEPERMITID
		FROM #tempWFSTEP
		
		INSERT INTO PMPERMITWFSTEP 
		([PMPERMITWFSTEPID]
           ,[PMPERMITID]
           ,[WFSTEPTYPEID]
           ,[PRIORITYORDER]
           ,[STARTDATE]
           ,[ENDDATE]
           ,[DESCRIPTION]
           ,[WORKFLOWSTATUSID]
           ,[ROWVERSION]
           ,[LASTCHANGEDON]
           ,[LASTCHANGEDBY]
           ,[REQUIREDSUBPLPLANID]
           ,[NAME]
           ,[WORKFLOWCOMPLETETYPEID]
           ,[ICON]
           ,[DAYSTOCOMPLETE]
           ,[PMPERMITWFPARENTSTEPID]
           ,[VERSIONNUMBER]
           ,[SORTORDER]
           ,[GENERALREASON]
           ,[AUTOCOMPLETED]
           ,[WFTEMPLATESTEPID]
           ,[NOPRIORITY]
           ,[DUEDATE])
		SELECT [PMPERMITWFSTEPID]
           ,[PMPERMITID]
           ,[WFSTEPTYPEID]
           ,[PRIORITYORDER]
           ,[STARTDATE]
           ,[ENDDATE]
           ,[DESCRIPTION]
           ,[WORKFLOWSTATUSID]
           ,[ROWVERSION]
           ,[LASTCHANGEDON]
           ,[LASTCHANGEDBY]
           ,[REQUIREDSUBPLPLANID]
           ,[NAME]
           ,[WORKFLOWCOMPLETETYPEID]
           ,[ICON]
           ,[DAYSTOCOMPLETE]
           ,[PMPERMITWFPARENTSTEPID]
           ,[VERSIONNUMBER]
           ,[SORTORDER]
           ,[GENERALREASON]
           ,[AUTOCOMPLETED]
           ,[WFTEMPLATESTEPID]
           ,[NOPRIORITY]
           ,[DUEDATE] 
		FROM #tempWFSTEP;
		
		-- Update the workflow action
		UPDATE #tempWFSTEPACTION
		SET #tempWFSTEPACTION.PMPERMITWFACTIONSTEPID = (SELECT NEWACTIONID FROM #tempWFSTEPACTIONXREF WHERE #tempWFSTEPACTION.PMPERMITWFACTIONSTEPID = #tempWFSTEPACTIONXREF.PMPERMITWFACTIONSTEPID),
		#tempWFSTEPACTION.PMPERMITWFPARENTACTIONSTEPID = (SELECT NEWACTIONID FROM #tempWFSTEPACTIONXREF WHERE #tempWFSTEPACTION.PMPERMITWFPARENTACTIONSTEPID = #tempWFSTEPACTIONXREF.PMPERMITWFACTIONSTEPID),
		#tempWFSTEPACTION.PMPERMITWFSTEPID = (SELECT NEWSTEPID FROM #tempWFSTEPXREF WHERE #tempWFSTEPACTION.PMPERMITWFSTEPID = #tempWFSTEPXREF.PMPERMITWFSTEPID)
		FROM #tempWFSTEPACTION
		
		INSERT INTO PMPERMITWFACTIONSTEP 
		([PMPERMITWFACTIONSTEPID]
           ,[PMPERMITWFSTEPID]
           ,[WFACTIONTYPEID]
           ,[DESCRIPTION]
           ,[PRIORITYORDER]
           ,[STARTDATE]
           ,[ENDDATE]
           ,[ROWVERSION]
           ,[LASTCHANGEDON]
           ,[LASTCHANGEDBY]
           ,[WORKFLOWSTATUSID]
           ,[LOCATION]
           ,[EXPECTEDDURATIONHOURS]
           ,[EVENTDATE]
           ,[NAME]
           ,[HEARINGTYPEID]
           ,[PASSDESCRIPTION]
           ,[FAILDESCRIPTION]
           ,[ALLOWREDO]
           ,[REDODESCRIPTION]
           ,[ICON]
           ,[DAYSTOCOMPLETE]
           ,[MEETINGTYPEID]
           ,[PMPERMITWFPARENTACTIONSTEPID]
           ,[VERSIONNUMBER]
           ,[SORTORDER]
           ,[GENERALREASON]
           ,[AUTORECEIVE]
           ,[WORKFLOWCOMPLETETYPEID]
           ,[AUTOCOMPLETED]
           ,[IMINSPECTIONTYPEID]
           ,[PMPERMITTYPEID]
           ,[PMPERMITWORKCLASSID]
           ,[PLPLANTYPEID]
           ,[PLPLANWORKCLASSID]
           ,[BLLICENSETYPEID]
           ,[BLLICENSECLASSID]
           ,[PMPERMITACTIVITYTYPEID]
           ,[RPTREPORTID]
           ,[PARENTINSPECTIONNUMBER]
           ,[TASKTYPEID]
           ,[NOPRIORITY]
           ,[DUEDATE]
           ,[IMINSPECTIONCASETYPEID]
           ,[CAFEETEMPLATEID]
           ,[ISAUTOINVOICE]
           ,[ISREQUIREDFULLPAYMNENT]
           ,[OMOBJECTTYPEID]
           ,[OMOBJECTCLASSIFICATIONID]
           ,[COMPUTEFEEACTIONTYPEID]
           ,[ISUSEACTIONDATEASFEEDATE]
           ,[ISCOMPUTEMAINFEETEMPLATE]
           ,[INSPECTIONSET]
           ,[CMCASETYPEID]
           ,[PLSUBMITTALTYPEID]
           ,[WKOTYPEID]
           ,[WKOTYPENAME]
           ,[WKOCLASSID]
           ,[WKOCLASSNAME])		   
	    SELECT [PMPERMITWFACTIONSTEPID]
           ,[PMPERMITWFSTEPID]
           ,[WFACTIONTYPEID]
           ,[DESCRIPTION]
           ,[PRIORITYORDER]
           ,[STARTDATE]
           ,[ENDDATE]
           ,[ROWVERSION]
           ,[LASTCHANGEDON]
           ,[LASTCHANGEDBY]
           ,[WORKFLOWSTATUSID]
           ,[LOCATION]
           ,[EXPECTEDDURATIONHOURS]
           ,[EVENTDATE]
           ,[NAME]
           ,[HEARINGTYPEID]
           ,[PASSDESCRIPTION]
           ,[FAILDESCRIPTION]
           ,[ALLOWREDO]
           ,[REDODESCRIPTION]
           ,[ICON]
           ,[DAYSTOCOMPLETE]
           ,[MEETINGTYPEID]
           ,[PMPERMITWFPARENTACTIONSTEPID]
           ,[VERSIONNUMBER]
           ,[SORTORDER]
           ,[GENERALREASON]
           ,[AUTORECEIVE]
           ,[WORKFLOWCOMPLETETYPEID]
           ,[AUTOCOMPLETED]
           ,[IMINSPECTIONTYPEID]
           ,[PMPERMITTYPEID]
           ,[PMPERMITWORKCLASSID]
           ,[PLPLANTYPEID]
           ,[PLPLANWORKCLASSID]
           ,[BLLICENSETYPEID]
           ,[BLLICENSECLASSID]
           ,[PMPERMITACTIVITYTYPEID]
           ,[RPTREPORTID]
           ,[PARENTINSPECTIONNUMBER]
           ,[TASKTYPEID]
           ,[NOPRIORITY]
           ,[DUEDATE]
           ,[IMINSPECTIONCASETYPEID]
           ,[CAFEETEMPLATEID]
           ,[ISAUTOINVOICE]
           ,[ISREQUIREDFULLPAYMNENT]
           ,[OMOBJECTTYPEID]
           ,[OMOBJECTCLASSIFICATIONID]
           ,[COMPUTEFEEACTIONTYPEID]
           ,[ISUSEACTIONDATEASFEEDATE]
           ,[ISCOMPUTEMAINFEETEMPLATE]
           ,[INSPECTIONSET]
           ,[CMCASETYPEID]
           ,[PLSUBMITTALTYPEID]
           ,[WKOTYPEID]
           ,[WKOTYPENAME]
           ,[WKOCLASSID]
           ,[WKOCLASSNAME] 
		FROM #tempWFSTEPACTION;
		
		SELECT * INTO #tempPERMITACTIONREF
		FROM PMPERMITACTIONREF WHERE PMPERMITACTIONREF.OBJECTID IN 
		(
			SELECT PMPERMITWFACTIONSTEPID FROM #tempWFSTEPACTIONXREF
		);
		
		UPDATE #tempPERMITACTIONREF
		SET #tempPERMITACTIONREF.OBJECTID = (SELECT NEWACTIONID FROM #tempWFSTEPACTIONXREF WHERE #tempPERMITACTIONREF.OBJECTID = #tempWFSTEPACTIONXREF.PMPERMITWFACTIONSTEPID)
		FROM #tempPERMITACTIONREF
		
		INSERT INTO PMPERMITACTIONREF SELECT * FROM #tempPERMITACTIONREF;
		
		SELECT * INTO #tempPLANACTIONREF
		FROM PLPLANACTIONREF WHERE PLPLANACTIONREF.OBJECTID IN 
		(
			SELECT PMPERMITWFACTIONSTEPID FROM #tempWFSTEPACTIONXREF
		);
		
		UPDATE #tempPLANACTIONREF
		SET #tempPLANACTIONREF.OBJECTID = (SELECT NEWACTIONID FROM #tempWFSTEPACTIONXREF WHERE #tempPLANACTIONREF.OBJECTID = #tempWFSTEPACTIONXREF.PMPERMITWFACTIONSTEPID)
		FROM #tempPLANACTIONREF
		
		INSERT INTO PLPLANACTIONREF SELECT * FROM #tempPLANACTIONREF;
		
		DROP TABLE #tempWFSTEP;
		DROP TABLE #tempWFSTEPXREF;
		DROP TABLE #tempWFSTEPACTION;
		DROP TABLE #tempPERMITACTIONREF;
		DROP TABLE #tempPLANACTIONREF;
		DROP TABLE #tempWFSTEPACTIONXREF;
		
		-- INSERT Custom Fields

		SELECT * INTO #tempCUSTOM FROM CUSTOMSAVERPERMITMANAGEMENT WHERE ID = @ORIGINALPERMITID;
		UPDATE #tempCUSTOM SET ID = @ONEPERMITID WHERE ID = @ORIGINALPERMITID;
		INSERT INTO CUSTOMSAVERPERMITMANAGEMENT SELECT * FROM #tempCUSTOM
				
		DROP TABLE #tempCUSTOM;

		SELECT * INTO #tempCUSTOM2 FROM CUSTOMSAVERPERMITMANAGEMENT2 WHERE ID = @ORIGINALPERMITID;
		UPDATE #tempCUSTOM2 SET ID = @ONEPERMITID WHERE ID = @ORIGINALPERMITID;
		INSERT INTO CUSTOMSAVERPERMITMANAGEMENT2 SELECT * FROM #tempCUSTOM2
				
		DROP TABLE #tempCUSTOM2;

		-- Include CUSTOMSAVERPERMITMANAGEMENTMS
		SELECT * INTO #tempCUSTOMMS FROM CUSTOMSAVERPERMITMANAGEMENTMS WHERE ID = @ORIGINALPERMITID;
		UPDATE #tempCUSTOMMS SET ID = @ONEPERMITID WHERE ID = @ORIGINALPERMITID;
		INSERT INTO CUSTOMSAVERPERMITMANAGEMENTMS SELECT * FROM #tempCUSTOMMS
		DROP TABLE #tempCUSTOMMS;

		-- Include CUSTOMSAVERPERMITMANAGEMENTWS
		SELECT * INTO #tempCUSTOMWS FROM CUSTOMSAVERPERMITMANAGEMENTWS WHERE ID = @ORIGINALPERMITID;
		UPDATE #tempCUSTOMWS SET ID = @ONEPERMITID WHERE ID = @ORIGINALPERMITID;
		INSERT INTO CUSTOMSAVERPERMITMANAGEMENTWS SELECT * FROM #tempCUSTOMWS
		DROP TABLE #tempCUSTOMWS;

	    -- INSERT Custom Fields Table

		-- Include CUSTOMSAVERTBLCOL_BLN
 		SELECT * INTO #tempCUSTOMBLN FROM CUSTOMSAVERTBLCOL_BLN WHERE OBJECTID = @ORIGINALPERMITID;
		UPDATE #tempCUSTOMBLN SET CUSTOMSAVERTABLECOLUMNID = NEWID(), OBJECTID = @ONEPERMITID WHERE OBJECTID = @ORIGINALPERMITID;
		INSERT INTO CUSTOMSAVERTBLCOL_BLN SELECT * FROM #tempCUSTOMBLN
		DROP TABLE #tempCUSTOMBLN;

		-- Include CUSTOMSAVERTBLCOL_DATE
 		SELECT * INTO #tempCUSTOMTDTE FROM CUSTOMSAVERTBLCOL_DATE WHERE OBJECTID = @ORIGINALPERMITID;
		UPDATE #tempCUSTOMTDTE SET CUSTOMSAVERTABLECOLUMNID = NEWID(), OBJECTID = @ONEPERMITID WHERE OBJECTID = @ORIGINALPERMITID;
		INSERT INTO CUSTOMSAVERTBLCOL_DATE SELECT * FROM #tempCUSTOMTDTE
		DROP TABLE #tempCUSTOMTDTE;

		-- Include CUSTOMSAVERTBLCOL_FLT
 		SELECT * INTO #tempCUSTOMFLT FROM CUSTOMSAVERTBLCOL_FLT WHERE OBJECTID = @ORIGINALPERMITID;
		UPDATE #tempCUSTOMFLT SET CUSTOMSAVERTABLECOLUMNID = NEWID(), OBJECTID = @ONEPERMITID WHERE OBJECTID = @ORIGINALPERMITID;
		INSERT INTO CUSTOMSAVERTBLCOL_FLT SELECT * FROM #tempCUSTOMFLT
		DROP TABLE #tempCUSTOMFLT;

		-- Include CUSTOMSAVERTBLCOL_INT
 		SELECT * INTO #tempCUSTOMINT FROM CUSTOMSAVERTBLCOL_INT WHERE OBJECTID = @ORIGINALPERMITID;
		UPDATE #tempCUSTOMINT SET CUSTOMSAVERTABLECOLUMNID = NEWID(), OBJECTID = @ONEPERMITID WHERE OBJECTID = @ORIGINALPERMITID;
		INSERT INTO CUSTOMSAVERTBLCOL_INT SELECT * FROM #tempCUSTOMINT
		DROP TABLE #tempCUSTOMINT;

		-- Include CUSTOMSAVERTBLCOL_LST
 		SELECT * INTO #tempCUSTOMLST FROM CUSTOMSAVERTBLCOL_LST WHERE OBJECTID = @ORIGINALPERMITID;
		UPDATE #tempCUSTOMLST SET CUSTOMSAVERTABLECOLUMNID = NEWID(), OBJECTID = @ONEPERMITID WHERE OBJECTID = @ORIGINALPERMITID;
		INSERT INTO CUSTOMSAVERTBLCOL_LST SELECT * FROM #tempCUSTOMLST
		DROP TABLE #tempCUSTOMLST;

		-- Include CUSTOMSAVERTBLCOL_MEM
 		SELECT * INTO #tempCUSTOMMEM FROM CUSTOMSAVERTBLCOL_MEM WHERE OBJECTID = @ORIGINALPERMITID;
		UPDATE #tempCUSTOMMEM SET CUSTOMSAVERTABLECOLUMNID = NEWID(), OBJECTID = @ONEPERMITID WHERE OBJECTID = @ORIGINALPERMITID;
		INSERT INTO CUSTOMSAVERTBLCOL_MEM SELECT * FROM #tempCUSTOMMEM
		DROP TABLE #tempCUSTOMMEM;

		-- Include CUSTOMSAVERTBLCOL_MNY
 		SELECT * INTO #tempCUSTOMMNY FROM CUSTOMSAVERTBLCOL_MNY WHERE OBJECTID = @ORIGINALPERMITID;
		UPDATE #tempCUSTOMMNY SET CUSTOMSAVERTABLECOLUMNID = NEWID(), OBJECTID = @ONEPERMITID WHERE OBJECTID = @ORIGINALPERMITID;
		INSERT INTO CUSTOMSAVERTBLCOL_MNY SELECT * FROM #tempCUSTOMMNY
		DROP TABLE #tempCUSTOMMNY;

		-- Include CUSTOMSAVERTBLCOL_STR
 		SELECT * INTO #tempCUSTOMSTR FROM CUSTOMSAVERTBLCOL_STR WHERE OBJECTID = @ORIGINALPERMITID;
		UPDATE #tempCUSTOMSTR SET CUSTOMSAVERTABLECOLUMNID = NEWID(), OBJECTID = @ONEPERMITID WHERE OBJECTID = @ORIGINALPERMITID;
		INSERT INTO CUSTOMSAVERTBLCOL_STR SELECT * FROM #tempCUSTOMSTR
		DROP TABLE #tempCUSTOMSTR;

		
		-- Increment the count
		SET @COUNT = (@COUNT +1)
		SET @MINNEXTNUMBER = @MINNEXTNUMBER + 1;
	END

	/*===========================================================================================================
	  COMMIT OR ROLL BACK - DO NOT REMOVE
	=============================================================================================================*/
	-- SELECT @PERMITIDS;
    SELECT * FROM @Results
END