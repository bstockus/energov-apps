
CREATE PROCEDURE [dbo].[CAP_MY_EXISTING_INSPECTIONS]
(
	@GLOBAL_ENTITY_ID CHAR(36),
	@APPLY_DATE_CUTOFF DATETIME,
	@PAGE_SIZE INT,
	@PAGE_NUMBER INT,
	@SORT_INDEX INT,
	@FILTER_INDEX INT
)
AS
BEGIN

DECLARE @QUERY_START INT = (@PAGE_NUMBER - 1) * @PAGE_SIZE;
DECLARE @QUERY_END INT = @QUERY_START + @PAGE_SIZE;

SELECT * FROM 
( 
	SELECT  ROW_NUMBER() OVER
	(
	ORDER BY
	CASE WHEN @SORT_INDEX = 1 THEN LINKNUMBER
         WHEN @SORT_INDEX = 2 THEN
          INSPECTIONADDRESS.ADDRESSLINE1 + ' ' + INSPECTIONADDRESS.PREDIRECTION + ' ' + INSPECTIONADDRESS.ADDRESSLINE2 + ' ' + INSPECTIONADDRESS.STREETTYPE + ' ' +
          INSPECTIONADDRESS.POSTDIRECTION + ' ' + INSPECTIONADDRESS.UNITORSUITE + ' ' + INSPECTIONADDRESS.ADDRESSLINE3 + ' ' + INSPECTIONADDRESS.CITY + ' ' +
          CASE WHEN INSPECTIONADDRESS.COUNTRYTYPE = 1 THEN INSPECTIONADDRESS.PROVINCE ELSE INSPECTIONADDRESS.STATE END + ' ' + INSPECTIONADDRESS.POSTALCODE
         WHEN @SORT_INDEX = 3 THEN IMINSPECTIONTYPE.NAME
         WHEN @SORT_INDEX = 4 THEN 
		 CASE
            WHEN IMINSPECTION.REQUESTEDDATE IS NOT NULL AND IMINSPECTION.SCHEDULEDSTARTDATE IS NULL AND IMINSPECTION.ACTUALENDDATE IS NULL THEN 'Requested' 
            WHEN IMINSPECTION.SCHEDULEDSTARTDATE IS NOT NULL AND IMINSPECTION.ACTUALENDDATE IS NULL THEN 'Scheduled'
            WHEN IMINSPECTION.ACTUALENDDATE IS NOT NULL AND IMINSPECTION.ACTUALENDDATE >= @APPLY_DATE_CUTOFF THEN 'Closed'
         END
		 WHEN @SORT_INDEX = 5 THEN CONVERT(nvarchar(50), IMINSPECTION.REQUESTEDDATE, 112)
		 WHEN @SORT_INDEX = 6 THEN CONVERT(nvarchar(50), IMINSPECTION.SCHEDULEDSTARTDATE, 112)
	END, 
    IMINSPECTION.IMINSPECTIONID
	) ROWNUMBER,
	COUNT(1) OVER() TOTALFOUND,
	IMINSPECTION.IMINSPECTIONID,
	IMINSPECTION.LINKID ENTITYID,
	IMINSPECTION.LINKNUMBER ENTITYNUMBER,
	CASE 
		WHEN IMINSPECTION.IMINSPECTIONLINKID = 1 THEN 2		--Plan
		WHEN IMINSPECTION.IMINSPECTIONLINKID = 2 THEN 1	--Permit
		ELSE 0
	END MODULEID,
	IMINSPECTIONTYPE.NAME INSPECTIONTYPE,
	CASE 
		WHEN IMINSPECTION.REQUESTEDDATE IS NOT NULL AND IMINSPECTION.SCHEDULEDSTARTDATE IS NULL AND IMINSPECTION.ACTUALENDDATE IS NULL THEN 'Requested' 
		WHEN IMINSPECTION.SCHEDULEDSTARTDATE IS NOT NULL AND IMINSPECTION.ACTUALENDDATE IS NULL THEN 'Scheduled'
		WHEN IMINSPECTION.ACTUALENDDATE IS NOT NULL AND IMINSPECTION.ACTUALENDDATE >= @APPLY_DATE_CUTOFF THEN 'Closed'
	END INSPECTIONSTATUS,
	IMINSPECTION.REQUESTEDDATE,
	IMINSPECTION.SCHEDULEDSTARTDATE,
	IMINSPECTION.ACTUALENDDATE,
	IMINSPECTIONTYPE.ALLOWPUBLICREQUESTS,
	INSPECTIONADDRESS.*
	
	FROM  IMINSPECTION
	INNER JOIN  IMINSPECTIONTYPE ON IMINSPECTIONTYPE.IMINSPECTIONTYPEID = IMINSPECTION.IMINSPECTIONTYPEID
	INNER JOIN IMINSPECTIONSTATUS ON IMINSPECTIONSTATUS.IMINSPECTIONSTATUSID = IMINSPECTION.IMINSPECTIONSTATUSID
	
	LEFT OUTER JOIN
    (Select IMINSPECTIONADDRESS.IMINSPECTIONID MODULEADDRESSID, MAILINGADDRESS.*
		FROM  IMINSPECTIONADDRESS
		INNER JOIN  MAILINGADDRESS ON MAILINGADDRESS.MAILINGADDRESSID = IMINSPECTIONADDRESS.MAILINGADDRESSID
      where IMINSPECTIONADDRESS.MAIN = 1
    )INSPECTIONADDRESS ON INSPECTIONADDRESS.MODULEADDRESSID = IMINSPECTION.IMINSPECTIONID
		
	WHERE EXISTS(SELECT 1 FROM IMINSPECTIONCONTACT WHERE IMINSPECTIONCONTACT.GLOBALENTITYID = @GLOBAL_ENTITY_ID AND IMINSPECTIONCONTACT.IMINSPECTIONID = IMINSPECTION.IMINSPECTIONID) 
	AND
    (
		(@FILTER_INDEX = 3 AND (IMINSPECTION.REQUESTEDDATE >= @APPLY_DATE_CUTOFF OR IMINSPECTION.SCHEDULEDSTARTDATE >= @APPLY_DATE_CUTOFF OR IMINSPECTION.ACTUALENDDATE >= @APPLY_DATE_CUTOFF)) OR --All
		(
			(@FILTER_INDEX = 0 AND IMINSPECTION.REQUESTEDDATE IS NOT NULL AND IMINSPECTION.SCHEDULEDSTARTDATE IS NULL AND IMINSPECTION.ACTUALENDDATE IS NULL) OR --Requested
			(@FILTER_INDEX = 1 AND IMINSPECTION.SCHEDULEDSTARTDATE IS NOT NULL AND IMINSPECTION.ACTUALENDDATE IS NULL) OR --Scheduled
			(@FILTER_INDEX = 2 AND IMINSPECTION.ACTUALENDDATE IS NOT NULL AND IMINSPECTION.ACTUALENDDATE >= @APPLY_DATE_CUTOFF) --Closed
		)
    )
	AND IMINSPECTION.IMINSPECTIONLINKID IN (1, 2) --Modules
) INSPECTIONDATA 
WHERE ROWNUMBER > @QUERY_START AND ROWNUMBER <= @QUERY_END; --Paging Limits


END;

