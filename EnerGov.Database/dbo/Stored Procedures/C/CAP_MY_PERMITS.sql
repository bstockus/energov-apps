 
CREATE PROCEDURE [dbo].[CAP_MY_PERMITS]
(
	@GLOBAL_ENTITY_ID CHAR(36),
	@APPLY_DATE_CUTOFF DATETIME,
	@PAGE_SIZE INT,
	@PAGE_NUMBER INT,
	@SORT_INDEX INT,
	@FILTER_INDEX INT
)
AS
BEGIN

	DECLARE @QUERY_START INT = (@PAGE_NUMBER - 1) * @PAGE_SIZE;
	DECLARE @QUERY_END INT = @QUERY_START + @PAGE_SIZE;

	SELECT * FROM ( SELECT  ROW_NUMBER() OVER(
    ORDER BY 
    CASE WHEN @SORT_INDEX = 1 THEN PMPERMIT.PERMITNUMBER
         WHEN @SORT_INDEX = 2 THEN PRPROJECT.NAME
         WHEN @SORT_INDEX = 3 THEN 
          PMPERMITADDRESS.ADDRESSLINE1 + ' ' + PMPERMITADDRESS.PREDIRECTION + ' ' + PMPERMITADDRESS.ADDRESSLINE2 + ' ' + PMPERMITADDRESS.STREETTYPE + ' ' +
          PMPERMITADDRESS.POSTDIRECTION + ' ' + PMPERMITADDRESS.UNITORSUITE + ' ' + PMPERMITADDRESS.ADDRESSLINE3 + ' ' + PMPERMITADDRESS.CITY + ' ' + 
          CASE WHEN PMPERMITADDRESS.COUNTRYTYPE = 1 THEN PMPERMITADDRESS.PROVINCE ELSE PMPERMITADDRESS.STATE END + ' ' + PMPERMITADDRESS.POSTALCODE
         WHEN @SORT_INDEX = 4 THEN PMPERMITTYPE.NAME         
         WHEN @SORT_INDEX = 5 THEN PMPERMITWORKCLASS.NAME
         WHEN @SORT_INDEX = 6 THEN 
		  COALESCE(
			CASE WHEN (
				CASE WHEN PMPERMITSTATUS.ISSUEDFLAG = 1 OR PMPERMIT.ISSUEDATE IS NOT NULL THEN 'Active, ' ELSE '' END +
				CASE WHEN PMPERMITSTATUS.FAILUREFLAG = 1 OR PMPERMITSTATUS.HOLDFLAG = 1 OR dbo.PERMIT_HAS_UNPAID_FEES(PMPERMIT.PMPERMITID) = 1 OR dbo.PERMIT_HAS_FAILED_INSPECTIONS(PMPERMIT.PMPERMITID) = 1 THEN 'Attention, ' ELSE '' END +
				CASE WHEN PMPERMIT.APPLYDATE >= @APPLY_DATE_CUTOFF THEN 'Recent, ' ELSE '' END +
				CASE WHEN PMPERMIT.ISSUEDATE IS NULL AND PMPERMIT.FINALIZEDATE IS NULL AND PMPERMIT.EXPIREDATE IS NULL THEN 'Pending, ' ELSE '' END) = '' THEN NULL 
			ELSE 
				CASE WHEN PMPERMITSTATUS.ISSUEDFLAG = 1 OR PMPERMIT.ISSUEDATE IS NOT NULL THEN 'Active, ' ELSE '' END +
				CASE WHEN PMPERMITSTATUS.FAILUREFLAG = 1 OR PMPERMITSTATUS.HOLDFLAG = 1 OR dbo.PERMIT_HAS_UNPAID_FEES(PMPERMIT.PMPERMITID) = 1 OR dbo.PERMIT_HAS_FAILED_INSPECTIONS(PMPERMIT.PMPERMITID) = 1 THEN 'Attention, ' ELSE '' END +
				CASE WHEN PMPERMIT.APPLYDATE >= @APPLY_DATE_CUTOFF THEN 'Recent, ' ELSE '' END +
				CASE WHEN PMPERMIT.ISSUEDATE IS NULL AND PMPERMIT.FINALIZEDATE IS NULL AND PMPERMIT.EXPIREDATE IS NULL THEN 'Pending, ' ELSE '' END 
			END ,'Others')
		 
		 WHEN @SORT_INDEX = 7 THEN
			CASE WHEN PMPERMITSTATUS.FAILUREFLAG = 1 THEN 'Fail, ' ELSE '' END + 
			CASE WHEN PMPERMITSTATUS.HOLDFLAG = 1 THEN 'On Hold, ' ELSE '' END +
			CASE WHEN dbo.PERMIT_HAS_UNPAID_FEES(PMPERMIT.PMPERMITID) = 1 THEN 'Unpaid Fees, ' ELSE '' END +
			CASE WHEN dbo.PERMIT_HAS_FAILED_INSPECTIONS(PMPERMIT.PMPERMITID) = 1 THEN 'Failed Inspections' ELSE '' END		 

    END, PMPERMIT.PMPERMITID
  ) ROWNUMBER,
	COUNT(*) OVER() TOTALFOUND, 
	PMPERMIT.PMPERMITID PERMITID, 
	PMPERMIT.PERMITNUMBER PERMITNUMBER,
	PMPERMIT.PMPERMITTYPEID,
	PMPERMIT.PMPERMITWORKCLASSID,
	PMPERMITTYPE.NAME PERMITTYPE, 
	PMPERMITWORKCLASS.NAME PERMITWORKCLASS, 
	PRPROJECT.NAME PROJECTNAME,
    
	COALESCE(
	CASE WHEN (
		CASE WHEN PMPERMITSTATUS.ISSUEDFLAG = 1 OR PMPERMIT.ISSUEDATE IS NOT NULL THEN 'Active, ' ELSE '' END +
		CASE WHEN PMPERMITSTATUS.FAILUREFLAG = 1 OR PMPERMITSTATUS.HOLDFLAG = 1 OR dbo.PERMIT_HAS_UNPAID_FEES(PMPERMIT.PMPERMITID) = 1 OR dbo.PERMIT_HAS_FAILED_INSPECTIONS(PMPERMIT.PMPERMITID) = 1 THEN 'Attention, ' ELSE '' END +
		CASE WHEN PMPERMIT.APPLYDATE >= @APPLY_DATE_CUTOFF THEN 'Recent, ' ELSE '' END +
		CASE WHEN PMPERMIT.ISSUEDATE IS NULL AND PMPERMIT.FINALIZEDATE IS NULL AND PMPERMIT.EXPIREDATE IS NULL THEN 'Pending, ' ELSE '' END) = '' THEN NULL 
	ELSE 
		CASE WHEN PMPERMITSTATUS.ISSUEDFLAG = 1 OR PMPERMIT.ISSUEDATE IS NOT NULL THEN 'Active, ' ELSE '' END +
		CASE WHEN PMPERMITSTATUS.FAILUREFLAG = 1 OR PMPERMITSTATUS.HOLDFLAG = 1 OR dbo.PERMIT_HAS_UNPAID_FEES(PMPERMIT.PMPERMITID) = 1 OR dbo.PERMIT_HAS_FAILED_INSPECTIONS(PMPERMIT.PMPERMITID) = 1 THEN 'Attention, ' ELSE '' END +
		CASE WHEN PMPERMIT.APPLYDATE >= @APPLY_DATE_CUTOFF THEN 'Recent, ' ELSE '' END +
		CASE WHEN PMPERMIT.ISSUEDATE IS NULL AND PMPERMIT.FINALIZEDATE IS NULL AND PMPERMIT.EXPIREDATE IS NULL THEN 'Pending, ' ELSE '' END 
	END ,'Others') STATUS,

	(CASE WHEN PMPERMITSTATUS.FAILUREFLAG = 1 THEN 'Fail, ' ELSE '' END + 
	CASE WHEN PMPERMITSTATUS.HOLDFLAG = 1 THEN 'On Hold, ' ELSE '' END +
	CASE WHEN dbo.PERMIT_HAS_UNPAID_FEES(PMPERMIT.PMPERMITID) = 1 THEN 'Unpaid Fees, ' ELSE '' END +
	CASE WHEN dbo.PERMIT_HAS_FAILED_INSPECTIONS(PMPERMIT.PMPERMITID) = 1 THEN 'Failed Inspections' ELSE '' END) REASON,


	PMPERMITADDRESS.*  
	FROM  PMPERMIT 
	INNER JOIN  PMPERMITTYPE ON PMPERMITTYPE.PMPERMITTYPEID = PMPERMIT.PMPERMITTYPEID 
	INNER JOIN  PMPERMITWORKCLASS ON PMPERMITWORKCLASS.PMPERMITWORKCLASSID = PMPERMIT.PMPERMITWORKCLASSID
	INNER JOIN PMPERMITSTATUS on PMPERMITSTATUS.PMPERMITSTATUSID = PMPERMIT.PMPERMITSTATUSID 
	LEFT OUTER JOIN  PRPROJECTPERMIT ON PRPROJECTPERMIT.PMPERMITID = PMPERMIT.PMPERMITID 
	LEFT OUTER JOIN  PRPROJECT ON PRPROJECT.PRPROJECTID = PRPROJECTPERMIT.PRPROJECTID 
	
	LEFT OUTER JOIN
	  ( SELECT PMPERMITADDRESS.PMPERMITID ModuleAddressId, MailingAddress.*  
	 FROM  PMPERMITADDRESS  PMPERMITADDRESS 
	   INNER JOIN  MailingAddress  MailingAddress ON MailingAddress.MailingAddressID = PMPERMITADDRESS.MailingAddressID 
	   WHERE PMPERMITADDRESS.MAIN = 1  
	 )
	  PMPERMITADDRESS   ON PMPERMITADDRESS.ModuleAddressId = PMPERMIT.PMPERMITID 

	 WHERE EXISTS(SELECT * FROM PMPERMITCONTACT WHERE PMPERMITCONTACT.GLOBALENTITYID = @GLOBAL_ENTITY_ID AND PMPERMITCONTACT.PMPERMITID = PMPERMIT.PMPERMITID) AND  
	 (@FILTER_INDEX = 5 OR 
(
        (@FILTER_INDEX = 2 AND (PMPERMITSTATUS.ISSUEDFLAG = 1 OR PMPERMIT.ISSUEDATE IS NOT NULL)) OR
        (@FILTER_INDEX = 0 AND (PMPERMITSTATUS.FAILUREFLAG = 1 OR PMPERMITSTATUS.HOLDFLAG = 1 OR dbo.PERMIT_HAS_UNPAID_FEES(PMPERMIT.PMPERMITID) = 1 OR dbo.PERMIT_HAS_FAILED_INSPECTIONS(PMPERMIT.PMPERMITID) = 1)) OR
        (@FILTER_INDEX = 4 AND PMPERMIT.APPLYDATE >= @APPLY_DATE_CUTOFF) OR
        (@FILTER_INDEX = 1 AND PMPERMIT.ISSUEDATE IS NULL AND PMPERMIT.FINALIZEDATE IS NULL AND PMPERMIT.EXPIREDATE IS NULL )
)
     )	 
	) NUMBERDDATA WHERE ROWNUMBER > @QUERY_START AND ROWNUMBER <= @QUERY_END;
END
