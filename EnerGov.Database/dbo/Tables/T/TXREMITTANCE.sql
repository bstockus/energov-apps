CREATE TABLE [dbo].[TXREMITTANCE] (
    [TXREMITTANCEID]        CHAR (36) NOT NULL,
    [TXREMITTANCEACCOUNTID] CHAR (36) NOT NULL,
    [TXBILLPERIODID]        CHAR (36) NOT NULL,
    [AMOUNTREPORTED]        MONEY     NULL,
    [REPORTEDDATE]          DATETIME  NULL,
    [PAYMENTDATE]           DATETIME  NULL,
    [GROSSAMOUNT]           MONEY     NULL,
    [EXEMPTAMOUNT]          MONEY     NULL,
    PRIMARY KEY CLUSTERED ([TXREMITTANCEID] ASC) WITH (FILLFACTOR = 90),
    CONSTRAINT [FK_TXREMITTANCETXBILLPERIODID] FOREIGN KEY ([TXBILLPERIODID]) REFERENCES [dbo].[TXBILLPERIOD] ([BILLPERIODID]),
    CONSTRAINT [FK_TXREMITTANCETXREMITTANCEACCOUNTID] FOREIGN KEY ([TXREMITTANCEACCOUNTID]) REFERENCES [dbo].[TXREMITTANCEACCOUNT] ([TXREMITTANCEACCOUNTID])
);


GO
CREATE NONCLUSTERED INDEX [IX_TXREMITTANCE_REPORTEDDATE]
    ON [dbo].[TXREMITTANCE]([REPORTEDDATE] ASC);


GO

CREATE TRIGGER [TG_TXREMITTANCEACCOUNT_INSERT_EVENT_QUEUE_REPORT_POPULATED] ON [TXREMITTANCE]
   AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	BEGIN
		INSERT INTO [TXREMITTANCEEVENTQUEUE]
			( 
				[TXREMITTANCEACCOUNTID],
				[TXREMITTANCEID],
				[TXREMITTANCEEVENTTYPEID],
				[EVENTSTATUSID],
				[CREATEDDATE]
			)
			-- check if the status is CLOSED, if this coniditon is met then insert a new record in the Event Queue table
			SELECT
				[INSERTED].TXREMITTANCEACCOUNTID,
				[INSERTED].TXREMITTANCEID,
				3, -- ID for 'Tax Report Populated' event Type 
				1, -- ID for 'Pending' Event Status
				GETUTCDATE()
			FROM [INSERTED]
			WHERE 
			    [INSERTED].[REPORTEDDATE] IS NOT NULL
	END
END
GO

CREATE TRIGGER [TG_TXREMITTANCEACCOUNT_UPDATE_EVENT_QUEUE_REPORT_POPULATED] ON [TXREMITTANCE]
   AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	INSERT INTO [TXREMITTANCEEVENTQUEUE]
			( 
				[TXREMITTANCEACCOUNTID],
				[TXREMITTANCEID],
				[TXREMITTANCEEVENTTYPEID],
				[EVENTSTATUSID],
				[CREATEDDATE]
			)
		-- insert using a SELECT query (do not use IF EXISTS SELECT or SELECT into variables/use the variables) so that if a bulk update of TXREMITTANCEACCOUNT is made 
		--then we pick the correct TXREMITTANCEACCOUNT record to check the previous and new REPORTED DATE
		SELECT 
			[INSERTED].TXREMITTANCEACCOUNTID,
			[INSERTED].TXREMITTANCEID,
			3, -- ID for 'Tax Report Populated' event Type 
			1, -- ID for 'Pending' Event Status
			GETUTCDATE()
		FROM [INSERTED]
		JOIN [DELETED] ON [DELETED].[TXREMITTANCEID] = [INSERTED].[TXREMITTANCEID]
		WHERE
			[INSERTED].[REPORTEDDATE] IS NOT NULL
			-- check if the old REPORTED DATE does not have value, if it's already reported then do not insert a new record in the Event Queue table
		AND [DELETED].[REPORTEDDATE] IS NULL
END
GO

CREATE TRIGGER [TG_TXREMITTANCEACCOUNT_INSERT_EVENT_QUEUE_REPORT_PERIOD_DUE] ON [TXREMITTANCE]
   AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	BEGIN
		INSERT INTO [TXREMITTANCEEVENTQUEUE]
			( 
				[TXREMITTANCEACCOUNTID],
				[TXREMITTANCEID],
				[TXREMITTANCEEVENTTYPEID],
				[EVENTSTATUSID],
				[CREATEDDATE]
			)
			-- Insert a new record in the Event Queue table anytime created (don't need to check the status)
			SELECT
				[INSERTED].TXREMITTANCEACCOUNTID,
				[INSERTED].TXREMITTANCEID,
				2, -- ID for 'Tax Report Period Due' event Type 
				1, -- ID for 'Pending' Event Status
				GETUTCDATE()
			FROM [INSERTED]
	END
END