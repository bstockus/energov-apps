CREATE TABLE [dbo].[IMINSPECTIONSTATUSENTITY] (
    [IMINSPECTIONSTATUSENTITYID] CHAR (36)      NOT NULL,
    [NAME]                       NVARCHAR (255) NOT NULL,
    [IMINSPECTIONLINKID]         INT            NOT NULL,
    [LASTCHANGEDBY]              CHAR (36)      NULL,
    [LASTCHANGEDON]              DATETIME       CONSTRAINT [DF_IMINSPECTIONSTATUSENTITY_LastChangedOn] DEFAULT (getutcdate()) NOT NULL,
    [ROWVERSION]                 INT            CONSTRAINT [DF_IMINSPECTIONSTATUSENTITY_RowVersion] DEFAULT ((1)) NOT NULL,
    CONSTRAINT [PK_IMInspectionStatusEntity] PRIMARY KEY CLUSTERED ([IMINSPECTIONSTATUSENTITYID] ASC) WITH (FILLFACTOR = 80),
    CONSTRAINT [FK_IMInspectionStatusEntity_IMInspectionLink] FOREIGN KEY ([IMINSPECTIONLINKID]) REFERENCES [dbo].[IMINSPECTIONLINK] ([IMINSPECTIONLINKID])
);


GO
CREATE NONCLUSTERED INDEX [IMINSPECTIONSTATUSENTITY_IX_QUERY]
    ON [dbo].[IMINSPECTIONSTATUSENTITY]([IMINSPECTIONSTATUSENTITYID] ASC, [NAME] ASC);


GO


CREATE TRIGGER [TG_IMINSPECTIONSTATUSENTITY_INSERT] ON [IMINSPECTIONSTATUSENTITY]
   FOR INSERT
AS 
BEGIN
	SET NOCOUNT ON;
	
	-- Check if LASTCHANGEDBY contains VALID User Id and it Exists in USERS table, this is in replacement to foreign key reference of IMINSPECTIONSTATUSENTITY table with USERS table.
	IF EXISTS (SELECT * FROM inserted 
		LEFT OUTER JOIN USERS WITH (NOLOCK) ON USERS.SUSERGUID = inserted.LASTCHANGEDBY
		WHERE inserted.LASTCHANGEDBY IS NOT NULL AND USERS.SUSERGUID IS NULL)
	BEGIN		
		RAISERROR ('The INSERT or UPDATE statement conflicted with the FOREIGN KEY to table USERS', 16, 0);
		ROLLBACK;
		RETURN;
	END

    INSERT INTO [HISTORYSYSTEMSETUP]
    (	[ID],
		[ROWVERSION],
		[CHANGEDON],
		[CHANGEDBY],
		[FIELDNAME],
		[OLDVALUE],
		[NEWVALUE],
		[ADDITIONALINFO],
		[FORMID],
		[ACTION],
		[ISROOT],
		[RECORDNAME]
    )

	SELECT
			[inserted].[IMINSPECTIONSTATUSENTITYID],
			[inserted].[ROWVERSION],
			GETUTCDATE(),
			[inserted].[LASTCHANGEDBY],
			'Inspection Status Entity Added',
			'',
			'',
			'Inspection Status Entity (' + [inserted].[NAME] + ')',
			'87FA7EE4-639C-4496-ABF7-217A877850A3',
			1,
			1,
			[inserted].[NAME]
	FROM	[inserted]	
END
GO

CREATE TRIGGER [TG_IMINSPECTIONSTATUSENTITY_UPDATE]	ON [IMINSPECTIONSTATUSENTITY]
AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;
		
	-- Check if LASTCHANGEDBY contains VALID User Id and it Exists in USERS table, this is in replacement to foreign key reference of IMINSPECTIONSTATUSENTITY table with USERS table.
	IF EXISTS (SELECT * FROM inserted 
		LEFT OUTER JOIN USERS WITH (NOLOCK) ON USERS.SUSERGUID = inserted.LASTCHANGEDBY
		WHERE inserted.LASTCHANGEDBY IS NOT NULL AND USERS.SUSERGUID IS NULL)
	BEGIN		
		RAISERROR ('The INSERT or UPDATE statement conflicted with the FOREIGN KEY to table USERS', 16, 0);
		ROLLBACK;
		RETURN;
	END		

    INSERT INTO [HISTORYSYSTEMSETUP]
    (	[ID],
		[ROWVERSION],
		[CHANGEDON],
		[CHANGEDBY],
		[FIELDNAME],
		[OLDVALUE],
		[NEWVALUE],
		[ADDITIONALINFO],
		[FORMID],
		[ACTION],
		[ISROOT],
		[RECORDNAME]
    )
	SELECT
			[inserted].[IMINSPECTIONSTATUSENTITYID],
			[inserted].[ROWVERSION],
			GETUTCDATE(),
			[inserted].[LASTCHANGEDBY],
			'Name',
			[deleted].[NAME],
			[inserted].[NAME],
			'Inspection Status Entity (' + [inserted].[NAME] + ')',
			'87FA7EE4-639C-4496-ABF7-217A877850A3',
			2,
			1,
			[inserted].[NAME]
	FROM	[deleted]
			JOIN [inserted] ON [deleted].[IMINSPECTIONSTATUSENTITYID] = [inserted].[IMINSPECTIONSTATUSENTITYID]
	WHERE	[deleted].[NAME] <> [inserted].[NAME]		
	UNION ALL
	SELECT
			[inserted].[IMINSPECTIONSTATUSENTITYID],
			[inserted].[ROWVERSION],
			GETUTCDATE(),
			[inserted].[LASTCHANGEDBY],
			'Inspection Link',
			[IMINSPECTIONLINK_DELETED].[NAME],
			[IMINSPECTIONLINK_INSERTED].[NAME],
			'Inspection Status Entity (' + [inserted].[NAME] + ')',
			'87FA7EE4-639C-4496-ABF7-217A877850A3',
			2,
			1,
			[inserted].[NAME]
	FROM	[deleted]
			JOIN [inserted] ON [deleted].[IMINSPECTIONSTATUSENTITYID] = [inserted].[IMINSPECTIONSTATUSENTITYID]
			LEFT OUTER JOIN IMINSPECTIONLINK IMINSPECTIONLINK_DELETED WITH (NOLOCK) ON [deleted].[IMINSPECTIONLINKID] = [IMINSPECTIONLINK_DELETED].[IMINSPECTIONLINKID]
			LEFT OUTER JOIN IMINSPECTIONLINK IMINSPECTIONLINK_INSERTED WITH (NOLOCK) ON [inserted].[IMINSPECTIONLINKID] = [IMINSPECTIONLINK_INSERTED].[IMINSPECTIONLINKID]
	WHERE	[deleted].[IMINSPECTIONLINKID] <> [inserted].[IMINSPECTIONLINKID]
END
GO

CREATE TRIGGER [TG_IMINSPECTIONSTATUSENTITY_DELETE] ON [IMINSPECTIONSTATUSENTITY]
   AFTER DELETE
AS 
BEGIN
	SET NOCOUNT ON;

    INSERT INTO [HISTORYSYSTEMSETUP]
    (	[ID],
		[ROWVERSION],
		[CHANGEDON],
		[CHANGEDBY],
		[FIELDNAME],
		[OLDVALUE],
		[NEWVALUE],
		[ADDITIONALINFO],
		[FORMID],
		[ACTION],
		[ISROOT],
		[RECORDNAME]
    )

	SELECT
			[deleted].[IMINSPECTIONSTATUSENTITYID],
			[deleted].[ROWVERSION],
			GETUTCDATE(),
			(SELECT dbo.UFN_GET_USERID_FROM_CONTEXT_INFO()),
			'Inspection Status Entity Deleted',
			'',
			'',
			'Inspection Status Entity (' + [deleted].[NAME] + ')',
			'87FA7EE4-639C-4496-ABF7-217A877850A3',
			3,
			1,
			[deleted].[NAME]
	FROM	[deleted]
END