CREATE TABLE [dbo].[ILMAPPEDVALUECLASS] (
    [MAPPEDVALUEID]             CHAR (36)    NOT NULL,
    [MAPPEDVALUE]               VARCHAR (50) NULL,
    [ILLICENSECLASSIFICATIONID] CHAR (36)    NULL,
    [LASTCHANGEDBY]             CHAR (36)    NULL,
    [LASTCHANGEDON]             DATETIME     CONSTRAINT [DF_ILMAPPEDVALUECLASS_LastChangedOn] DEFAULT (getutcdate()) NOT NULL,
    [ROWVERSION]                INT          CONSTRAINT [DF_ILMAPPEDVALUECLASS_RowVersion] DEFAULT ((1)) NOT NULL,
    CONSTRAINT [PK_ILMappedValueClass] PRIMARY KEY CLUSTERED ([MAPPEDVALUEID] ASC) WITH (FILLFACTOR = 90),
    CONSTRAINT [FK_MappedValue_Class] FOREIGN KEY ([ILLICENSECLASSIFICATIONID]) REFERENCES [dbo].[ILLICENSECLASSIFICATION] ([ILLICENSECLASSIFICATIONID])
);


GO
CREATE TRIGGER [TG_ILMAPPEDVALUECLASS_DELETE] ON [dbo].[ILMAPPEDVALUECLASS]
   AFTER DELETE
AS 
BEGIN
	SET NOCOUNT ON;
	
    INSERT INTO [HISTORYSYSTEMSETUP]
    (	[ID],
		[ROWVERSION],
		[CHANGEDON],
		[CHANGEDBY],
		[FIELDNAME],
		[OLDVALUE],
		[NEWVALUE],
		[ADDITIONALINFO],
		[FORMID],
		[ACTION],
		[ISROOT],
		[RECORDNAME]
    )	
	SELECT
			[deleted].[MAPPEDVALUEID],
			[deleted].[ROWVERSION],
			GETUTCDATE(),
			(SELECT dbo.UFN_GET_USERID_FROM_CONTEXT_INFO()),
			'Mapping Classification Deleted',
			'',
			'',
			ISNULL([dbo].[ILLICENSECLASSIFICATION].[NAME],'[none]'),
			'6115EBA3-71FF-4CEA-AB43-759135A83E0F',
			3,
			0,
			ISNULL([dbo].[ILLICENSECLASSIFICATION].[NAME],'[none]')
	FROM	[deleted]
	LEFT JOIN [dbo].[ILLICENSECLASSIFICATION] ON [dbo].[ILLICENSECLASSIFICATION].[ILLICENSECLASSIFICATIONID] = [deleted].[ILLICENSECLASSIFICATIONID]
END
GO
CREATE TRIGGER [TG_ILMAPPEDVALUECLASS_INSERT] ON [dbo].[ILMAPPEDVALUECLASS]
   AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;	
	-- Check if LASTCHANGEDBY contains VALID User Id and it Exists in USERS table, this is in replacement to foreign key reference of ILMAPPEDVALUECLASS table with USERS table.
	IF EXISTS (SELECT * FROM inserted 
		LEFT OUTER JOIN USERS WITH (NOLOCK) ON USERS.SUSERGUID = inserted.LASTCHANGEDBY
		WHERE inserted.LASTCHANGEDBY IS NOT NULL AND USERS.SUSERGUID IS NULL)
	BEGIN		
		RAISERROR ('The INSERT or UPDATE statement conflicted with the FOREIGN KEY to table USERS', 16, 0);
		ROLLBACK;
		RETURN;
	END

    INSERT INTO [HISTORYSYSTEMSETUP]
    (	[ID],
		[ROWVERSION],
		[CHANGEDON],
		[CHANGEDBY],
		[FIELDNAME],
		[OLDVALUE],
		[NEWVALUE],
		[ADDITIONALINFO],
		[FORMID],
		[ACTION],
		[ISROOT],
		[RECORDNAME]
    )
	SELECT
			[inserted].[MAPPEDVALUEID],
			[inserted].[ROWVERSION],
			GETUTCDATE(),
			[inserted].[LASTCHANGEDBY],
			'Mapping Classification Added',
			'',
			'',
			ISNULL([dbo].[ILLICENSECLASSIFICATION].[NAME],'[none]'),
			'6115EBA3-71FF-4CEA-AB43-759135A83E0F',
			1,
			0,
			ISNULL([dbo].[ILLICENSECLASSIFICATION].[NAME],'[none]')
	FROM	[inserted]
	LEFT JOIN [dbo].[ILLICENSECLASSIFICATION] ON [dbo].[ILLICENSECLASSIFICATION].[ILLICENSECLASSIFICATIONID] = [inserted].[ILLICENSECLASSIFICATIONID]
END
GO
CREATE TRIGGER [TG_ILMAPPEDVALUECLASS_UPDATE] ON [dbo].[ILMAPPEDVALUECLASS]
   AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;
	-- Check if LASTCHANGEDBY contains VALID User Id and it Exists in USERS table, this is in replacement to foreign key reference of ILMAPPEDVALUECLASS table with USERS table.
	IF EXISTS (SELECT * FROM inserted 
		LEFT OUTER JOIN USERS WITH (NOLOCK) ON USERS.SUSERGUID = inserted.LASTCHANGEDBY
		WHERE inserted.LASTCHANGEDBY IS NOT NULL AND USERS.SUSERGUID IS NULL)
	BEGIN		
		RAISERROR ('The INSERT or UPDATE statement conflicted with the FOREIGN KEY to table USERS', 16, 0);
		ROLLBACK;
		RETURN;
	END

    INSERT INTO [HISTORYSYSTEMSETUP]
    (	[ID],
		[ROWVERSION],
		[CHANGEDON],
		[CHANGEDBY],
		[FIELDNAME],
		[OLDVALUE],
		[NEWVALUE],
		[ADDITIONALINFO],
		[FORMID],
		[ACTION],
		[ISROOT],
		[RECORDNAME]
    )
	SELECT
			[inserted].[MAPPEDVALUEID],
			[inserted].[ROWVERSION],
			GETUTCDATE(),
			[inserted].[LASTCHANGEDBY],
			'Classification',
			ISNULL([deleted_ILLICENSECLASSIFICATION].[NAME],'[none]'),
			ISNULL([inserted_ILLICENSECLASSIFICATION].[NAME],'[none]'),
			ISNULL([inserted_ILLICENSECLASSIFICATION].[NAME],'[none]'),
			'6115EBA3-71FF-4CEA-AB43-759135A83E0F',
			2,
			0,
			ISNULL([inserted_ILLICENSECLASSIFICATION].[NAME],'[none]')
	FROM	[deleted]
			JOIN [inserted] ON [deleted].[MAPPEDVALUEID] = [inserted].[MAPPEDVALUEID]
			LEFT JOIN [dbo].[ILLICENSECLASSIFICATION] [deleted_ILLICENSECLASSIFICATION] ON [deleted_ILLICENSECLASSIFICATION].[ILLICENSECLASSIFICATIONID] = [deleted].[ILLICENSECLASSIFICATIONID]
			LEFT JOIN [dbo].[ILLICENSECLASSIFICATION] [inserted_ILLICENSECLASSIFICATION] ON [inserted_ILLICENSECLASSIFICATION].[ILLICENSECLASSIFICATIONID] = [inserted].[ILLICENSECLASSIFICATIONID]
	WHERE	ISNULL([deleted_ILLICENSECLASSIFICATION].[ILLICENSECLASSIFICATIONID],'') <> ISNULL([inserted_ILLICENSECLASSIFICATION].[ILLICENSECLASSIFICATIONID],'')
	UNION ALL

	SELECT
			[inserted].[MAPPEDVALUEID],
			[inserted].[ROWVERSION],
			GETUTCDATE(),
			[inserted].[LASTCHANGEDBY],
			'Mapped Classification Value',
			ISNULL([deleted].[MAPPEDVALUE],'[none]'),
			ISNULL([inserted].[MAPPEDVALUE],'[none]'),
			ISNULL([dbo].[ILLICENSECLASSIFICATION].[NAME],'[none]'),
			'6115EBA3-71FF-4CEA-AB43-759135A83E0F',
			2,
			0,
			ISNULL([dbo].[ILLICENSECLASSIFICATION].[NAME],'[none]')
	FROM	[deleted]
			JOIN [inserted] ON [deleted].[MAPPEDVALUEID] = [inserted].[MAPPEDVALUEID]
			LEFT JOIN [dbo].[ILLICENSECLASSIFICATION] ON [dbo].[ILLICENSECLASSIFICATION].[ILLICENSECLASSIFICATIONID] = [inserted].[ILLICENSECLASSIFICATIONID]
	WHERE	ISNULL([deleted].[MAPPEDVALUE],'') <> ISNULL([inserted].[MAPPEDVALUE],'')	
END