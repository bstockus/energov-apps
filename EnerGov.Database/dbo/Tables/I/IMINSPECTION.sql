CREATE TABLE [dbo].[IMINSPECTION] (
    [IMINSPECTIONID]                CHAR (36)        NOT NULL,
    [IMINSPECTIONSTATUSID]          CHAR (36)        NOT NULL,
    [IMINSPECTIONTYPEID]            CHAR (36)        NOT NULL,
    [IMINSPECTIONCASEID]            CHAR (36)        NULL,
    [IMSCHEDULEDTIMEGROUPID]        CHAR (36)        NULL,
    [INSPECTIONNUMBER]              NVARCHAR (50)    NOT NULL,
    [CREATEDATE]                    DATETIME         NOT NULL,
    [SCHEDULEDSTARTDATE]            DATETIME         NULL,
    [SCHEDULEDENDDATE]              DATETIME         NULL,
    [REQUESTEDDATE]                 DATETIME         NULL,
    [ACTUALSTARTDATE]               DATETIME         NULL,
    [ACTUALENDDATE]                 DATETIME         NULL,
    [ARRIVALTIMEDEVIATION]          DECIMAL (18, 4)  NULL,
    [REINSPECTED]                   BIT              NOT NULL,
    [ISREINSPECTION]                BIT              NOT NULL,
    [COMPLETE]                      BIT              NOT NULL,
    [ROWVERSION]                    INT              NOT NULL,
    [LASTCHANGEDBY]                 CHAR (36)        NULL,
    [LASTCHANGEDON]                 DATETIME         NULL,
    [GISY]                          DECIMAL (29, 15) NULL,
    [GISX]                          DECIMAL (29, 15) NULL,
    [IMINSPECTIONLINKID]            INT              NULL,
    [LINKID]                        CHAR (36)        NULL,
    [LINKNUMBER]                    NVARCHAR (50)    NULL,
    [REQUESTEDAMORPM]               INT              NULL,
    [SCHEDULEDAMORPM]               INT              NULL,
    [ORDERNUMBER]                   NUMERIC (18)     NULL,
    [IMINSPECTIONREQUESTEDSOURCEID] INT              NULL,
    [PARENTINSPECTIONNUMBER]        NVARCHAR (50)    NULL,
    [IMPORTCUSTOMFIELDLAYOUTID]     CHAR (36)        NULL,
    [EXCHANGEITEMID]                VARCHAR (200)    NULL,
    [ESTIMATEDMINUTES]              INT              NULL,
    [ISPARTIALPASS]                 BIT              DEFAULT ((0)) NOT NULL,
    [INSPECTIONORDER]               INT              DEFAULT ((0)) NOT NULL,
    [COMMENTS]                      NVARCHAR (MAX)   NULL,
    [NEXTSCHEDULEDSTARTDATE]        DATETIME         NULL,
    [NEXTSCHEDULEDAMORPM]           INT              NULL,
    CONSTRAINT [PK_IMInspection] PRIMARY KEY CLUSTERED ([IMINSPECTIONID] ASC),
    CONSTRAINT [FK_IMInspection_CustomField] FOREIGN KEY ([IMPORTCUSTOMFIELDLAYOUTID]) REFERENCES [dbo].[CUSTOMFIELDLAYOUT] ([GCUSTOMFIELDLAYOUTS]),
    CONSTRAINT [FK_IMInspection_IMInspectionCa] FOREIGN KEY ([IMINSPECTIONCASEID]) REFERENCES [dbo].[IMINSPECTIONCASE] ([IMINSPECTIONCASEID]),
    CONSTRAINT [FK_IMInspection_IMInspectionTy] FOREIGN KEY ([IMINSPECTIONTYPEID]) REFERENCES [dbo].[IMINSPECTIONTYPE] ([IMINSPECTIONTYPEID]),
    CONSTRAINT [FK_IMInspection_IMScheduledTim] FOREIGN KEY ([IMSCHEDULEDTIMEGROUPID]) REFERENCES [dbo].[IMSCHEDULEDTIMEGROUP] ([IMSCHEDULEDTIMEGROUPID]),
    CONSTRAINT [FK_IMInspection_Status] FOREIGN KEY ([IMINSPECTIONSTATUSID]) REFERENCES [dbo].[IMINSPECTIONSTATUS] ([IMINSPECTIONSTATUSID]),
    CONSTRAINT [FK_IMInspection_Users] FOREIGN KEY ([LASTCHANGEDBY]) REFERENCES [dbo].[USERS] ([SUSERGUID]),
    CONSTRAINT [FK_Inspection_Link] FOREIGN KEY ([IMINSPECTIONLINKID]) REFERENCES [dbo].[IMINSPECTIONLINK] ([IMINSPECTIONLINKID]),
    CONSTRAINT [FK_Inspection_RequestedSource] FOREIGN KEY ([IMINSPECTIONREQUESTEDSOURCEID]) REFERENCES [dbo].[IMINSPECTIONREQUESTEDSOURCE] ([IMINSPECTIONREQUESTEDSOURCEID])
);


GO
CREATE NONCLUSTERED INDEX [INSPECTION_START]
    ON [dbo].[IMINSPECTION]([SCHEDULEDSTARTDATE] ASC, [IMINSPECTIONID] ASC);


GO
CREATE NONCLUSTERED INDEX [IX_IMINSPECTION_TYPEID_CASEID]
    ON [dbo].[IMINSPECTION]([IMINSPECTIONTYPEID] ASC, [IMINSPECTIONCASEID] ASC);


GO
CREATE NONCLUSTERED INDEX [IX_INSP_LINK_PROJECT]
    ON [dbo].[IMINSPECTION]([LINKID] ASC, [IMINSPECTIONID] ASC)
    INCLUDE([IMINSPECTIONSTATUSID], [IMINSPECTIONTYPEID], [INSPECTIONNUMBER], [SCHEDULEDSTARTDATE], [SCHEDULEDENDDATE], [COMMENTS], [COMPLETE], [PARENTINSPECTIONNUMBER]);


GO
CREATE NONCLUSTERED INDEX [NCIDX_IMINSPECTION_IMINSPECTIONTYPEID]
    ON [dbo].[IMINSPECTION]([IMINSPECTIONTYPEID] ASC) WITH (FILLFACTOR = 90, PAD_INDEX = ON);


GO
CREATE NONCLUSTERED INDEX [NCIDX_IMINSPECTION_PARENTINSPECTIONNUMBER_INCL]
    ON [dbo].[IMINSPECTION]([PARENTINSPECTIONNUMBER] ASC)
    INCLUDE([SCHEDULEDSTARTDATE]) WITH (FILLFACTOR = 90, PAD_INDEX = ON);


GO
CREATE NONCLUSTERED INDEX [IX_IMINSPECTION_INSPECTIONNUMBER]
    ON [dbo].[IMINSPECTION]([INSPECTIONNUMBER] ASC);


GO
CREATE NONCLUSTERED INDEX [IX_INSPECTION_START]
    ON [dbo].[IMINSPECTION]([SCHEDULEDSTARTDATE] ASC, [IMINSPECTIONID] ASC)
    INCLUDE([LINKID], [IMINSPECTIONLINKID]);


GO
CREATE NONCLUSTERED INDEX [NCIDX_IMINSPECTION_COMPLETE_REQUESTEDDATE_IMINSPECTIONTYPEID_IMINSPECTIONID]
    ON [dbo].[IMINSPECTION]([COMPLETE] ASC, [REQUESTEDDATE] ASC, [IMINSPECTIONTYPEID] ASC, [IMINSPECTIONID] ASC);


GO
CREATE NONCLUSTERED INDEX [NCIDX_IMINSPECTION_COMPLETE_SCHEDULEDSTARTDATE_REQUESTEDDATE_IMINSPECTIONTYPEID_IMINSPECTIONID]
    ON [dbo].[IMINSPECTION]([COMPLETE] ASC, [SCHEDULEDSTARTDATE] ASC, [REQUESTEDDATE] ASC, [IMINSPECTIONTYPEID] ASC, [IMINSPECTIONID] ASC);


GO
CREATE NONCLUSTERED INDEX [INSPLIST1]
    ON [dbo].[IMINSPECTION]([IMINSPECTIONSTATUSID] ASC)
    INCLUDE([IMINSPECTIONID], [IMINSPECTIONTYPEID], [INSPECTIONNUMBER], [CREATEDATE], [SCHEDULEDSTARTDATE], [SCHEDULEDENDDATE], [REQUESTEDDATE], [ACTUALSTARTDATE], [ACTUALENDDATE], [ISREINSPECTION], [COMPLETE], [IMINSPECTIONLINKID], [LINKID], [LINKNUMBER], [COMMENTS]);


GO
CREATE NONCLUSTERED INDEX [IX_IMINSPECTION_LASTCHANGEDON]
    ON [dbo].[IMINSPECTION]([LASTCHANGEDON] ASC)
    INCLUDE([IMINSPECTIONID]);


GO
CREATE NONCLUSTERED INDEX [NCIDX_IMINSPECTION_LINKID]
    ON [dbo].[IMINSPECTION]([LINKID] ASC, [COMPLETE] ASC, [IMINSPECTIONTYPEID] ASC)
    INCLUDE([ACTUALENDDATE]);


GO
CREATE NONCLUSTERED INDEX [IX_IMINSPECTION_CASEID]
    ON [dbo].[IMINSPECTION]([IMINSPECTIONCASEID] ASC);


GO

CREATE TRIGGER [TG_IMINSPECTION_UPDATE_EVENT_QUEUE_FAILED] ON IMINSPECTION
   AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	INSERT INTO [INSPECTIONEVENTQUEUE]
		( 
				[IMINSPECTIONID],
				[INSPECTIONNUMBER],
				[INSPECTIONEVENTTYPEID],
				[EVENTSTATUSID],
				[CREATEDDATE],
				[INSPECTIONLASTCHANGEDBY]
		)
		-- insert using a SELECT query (do not use IF EXISTS SELECT or SELECT into variables/use the variables) so that if a bulk update of Inspection is made 
		--then we pick the correct Inspection record to check the previous and new status
		SELECT 
			[INSERTED].IMINSPECTIONID,
			[INSERTED].INSPECTIONNUMBER,
			4, -- ID for 'Inspection Failed' Inspection event Type 
			1, -- ID for 'Pending' event Status
			GETUTCDATE(),
			[INSERTED].LASTCHANGEDBY
		FROM [INSERTED]
		JOIN [IMINSPECTIONSTATUS] AS [NEWSTATUS] WITH(NOLOCK) ON [NEWSTATUS].IMINSPECTIONSTATUSID = [INSERTED].IMINSPECTIONSTATUSID
		JOIN [DELETED] ON [DELETED].IMINSPECTIONID = [INSERTED].IMINSPECTIONID
		JOIN [IMINSPECTIONSTATUS] AS [OLDSTATUS] WITH(NOLOCK) ON [OLDSTATUS].IMINSPECTIONSTATUSID = [DELETED].IMINSPECTIONSTATUSID
			-- check if the new status has INVIOLATION flag(it can also have any other flags set to 'true')
		WHERE [NEWSTATUS].[INVIOLATIONFLAG] = 1
			-- check if the old status of the Inspection has INVIOLATION flag(it can also have any other flags set to 'true'), if it's already a INVIOLATION flag then DO NOT insert a new record in the Inspection Event Queue table
		AND [OLDSTATUS].[INVIOLATIONFLAG] = 0 
END
GO
DISABLE TRIGGER [dbo].[TG_IMINSPECTION_UPDATE_EVENT_QUEUE_FAILED]
    ON [dbo].[IMINSPECTION];


GO

CREATE TRIGGER [TG_IMINSPECTION_UPDATE_EVENT_QUEUE_SCHEDULED] ON IMINSPECTION
   AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	INSERT INTO [INSPECTIONEVENTQUEUE]
		( 
				[IMINSPECTIONID],
				[INSPECTIONNUMBER],
				[INSPECTIONEVENTTYPEID],
				[EVENTSTATUSID],
				[CREATEDDATE],
				[INSPECTIONLASTCHANGEDBY]
		)
		-- insert using a SELECT query (do not use IF EXISTS SELECT or SELECT into variables/use the variables) so that if a bulk update of Inspection is made 
		--then we pick the correct Inspection record to check the previous and new status
		SELECT 
			[INSERTED].IMINSPECTIONID,
			[INSERTED].INSPECTIONNUMBER,
			2, -- ID for 'Inspection Scheduled' Inspection event Type 
			1, -- ID for 'Pending' event Status
			GETUTCDATE(),
			[INSERTED].LASTCHANGEDBY
		FROM [INSERTED]
		JOIN [IMINSPECTIONSTATUS] AS [NEWSTATUS] WITH(NOLOCK) ON [NEWSTATUS].IMINSPECTIONSTATUSID = [INSERTED].IMINSPECTIONSTATUSID
		JOIN [DELETED] ON [DELETED].IMINSPECTIONID = [INSERTED].IMINSPECTIONID
		JOIN [IMINSPECTIONSTATUS] AS [OLDSTATUS] WITH(NOLOCK) ON [OLDSTATUS].IMINSPECTIONSTATUSID = [DELETED].IMINSPECTIONSTATUSID
			-- check if the new status has SCHEDULED flag(it can also have any other flags set to 'true')
		WHERE [NEWSTATUS].[SCHEDULEDFLAG] = 1
			-- check if the old status of the Inspection has SCHEDULED flag(it can also have any other flags set to 'true'), if it's already a SCHEDULED flag then DO NOT insert a new record in the Inspection Event Queue table
		AND [OLDSTATUS].[SCHEDULEDFLAG] = 0 
 
END
GO
DISABLE TRIGGER [dbo].[TG_IMINSPECTION_UPDATE_EVENT_QUEUE_SCHEDULED]
    ON [dbo].[IMINSPECTION];


GO

CREATE TRIGGER [TG_IMINSPECTION_UPDATE_EVENT_QUEUE_PASSED] ON IMINSPECTION
   AFTER UPDATE
AS 
BEGIN
    SET NOCOUNT ON;

    INSERT INTO [INSPECTIONEVENTQUEUE]
        ( 
                [IMINSPECTIONID],
				[INSPECTIONNUMBER],
                [INSPECTIONEVENTTYPEID],
                [EVENTSTATUSID],
                [CREATEDDATE],
                [INSPECTIONLASTCHANGEDBY]
        )
        -- insert using a SELECT query (do not use IF EXISTS SELECT or SELECT into variables/use the variables) so that if a bulk update of Inspection is made 
        --then we pick the correct Inspection record to check the previous and new status
        SELECT 
            [INSERTED].IMINSPECTIONID,
			[INSERTED].INSPECTIONNUMBER,
            3, -- ID for 'Inspection Passed' Inspection event Type 
            1, -- ID for 'Pending' event Status
            GETUTCDATE(),
            [INSERTED].LASTCHANGEDBY
        FROM [INSERTED]
        JOIN [IMINSPECTIONSTATUS] AS [NEWSTATUS] WITH(NOLOCK) ON [NEWSTATUS].IMINSPECTIONSTATUSID = [INSERTED].IMINSPECTIONSTATUSID
        JOIN [DELETED] ON [DELETED].IMINSPECTIONID = [INSERTED].IMINSPECTIONID
        JOIN [IMINSPECTIONSTATUS] AS [OLDSTATUS] WITH(NOLOCK) ON [OLDSTATUS].IMINSPECTIONSTATUSID = [DELETED].IMINSPECTIONSTATUSID
            -- check if the new status has SUCCESSFUL flag(it can also have any other flags set to 'true')
        WHERE [NEWSTATUS].[INDICATESSUCCESS] = 1
            -- check if the old status of the Inspection has SUCCESSFUL flag(it can also have any other flags set to 'true'), if it's already a SUCCESSFUL flag then DO NOT insert a new record in the Inspection Event Queue table
        AND [OLDSTATUS].[INDICATESSUCCESS] = 0 
 
END
GO
DISABLE TRIGGER [dbo].[TG_IMINSPECTION_UPDATE_EVENT_QUEUE_PASSED]
    ON [dbo].[IMINSPECTION];


GO

CREATE TRIGGER [TG_IMINSPECTION_INSERT_EVENT_QUEUE_FAILED] ON IMINSPECTION
	AFTER INSERT
AS 
BEGIN

	SET NOCOUNT ON;

	BEGIN
		INSERT INTO [INSPECTIONEVENTQUEUE]
			( 
				[IMINSPECTIONID],
				[INSPECTIONNUMBER],
				[INSPECTIONEVENTTYPEID],
				[EVENTSTATUSID],
				[CREATEDDATE],
				[INSPECTIONLASTCHANGEDBY]
			)
			-- check if the status of the Inspection has INVIOLATION flag(it can have other flags set to 'true'), if this condition is met then insert a new record in the Inspection Event Queue table
			SELECT
				[INSERTED].IMINSPECTIONID,
			    [INSERTED].INSPECTIONNUMBER,
				4, -- ID for 'Inspection Failed' Inspection event Type 
				1, -- ID for 'Pending' event Status
				GETUTCDATE(),
				[INSERTED].LASTCHANGEDBY
			FROM
				[INSERTED]
			JOIN [IMINSPECTIONSTATUS] WITH(NOLOCK) ON [INSERTED].IMINSPECTIONSTATUSID = [IMINSPECTIONSTATUS].IMINSPECTIONSTATUSID
			WHERE
				[INVIOLATIONFLAG] = 1 				
	END
END
GO
DISABLE TRIGGER [dbo].[TG_IMINSPECTION_INSERT_EVENT_QUEUE_FAILED]
    ON [dbo].[IMINSPECTION];


GO

CREATE TRIGGER [TG_IMINSPECTION_INSERT_EVENT_QUEUE_DELETED] ON IMINSPECTION
   AFTER DELETE
AS 
BEGIN

	SET NOCOUNT ON;

	BEGIN
		INSERT INTO [INSPECTIONEVENTQUEUE]
			( 
				[IMINSPECTIONID],
				[INSPECTIONNUMBER],
				[INSPECTIONEVENTTYPEID],
				[EVENTSTATUSID],
				[CREATEDDATE],
				[INSPECTIONLASTCHANGEDBY]
			)
			-- Insert a new record in the Inspection Event Queue table anytime a Inspection is deleted (don't need to check the Inspection status)
			SELECT
				[DELETED].IMINSPECTIONID,
			    [DELETED].INSPECTIONNUMBER,
				5, -- ID for 'Inspection Deleted' Permit event Type 
				1, -- ID for 'Pending' Event Status
				GETUTCDATE(),
				[DELETED].LASTCHANGEDBY						
			FROM [DELETED]	

	END
END
GO

CREATE TRIGGER [TG_IMINSPECTION_INSERT_EVENT_QUEUE_PASSED] ON IMINSPECTION
   AFTER INSERT
AS 
BEGIN

    SET NOCOUNT ON;

    BEGIN
        INSERT INTO [INSPECTIONEVENTQUEUE]
            ( 
                [IMINSPECTIONID],
				[INSPECTIONNUMBER],
                [INSPECTIONEVENTTYPEID],
                [EVENTSTATUSID],
                [CREATEDDATE],
                [INSPECTIONLASTCHANGEDBY]
            )
            -- check if the status of the Inspection has SUCCESSFUL flag(it can have other flags set to 'true'), if this condition is met then insert a new record in the Inspection Event Queue table
            SELECT
                [INSERTED].IMINSPECTIONID,
			    [INSERTED].INSPECTIONNUMBER,
                3, -- ID for 'Inspection Passed' Inspection event Type 
                1, -- ID for 'Pending' event Status
                GETUTCDATE(),
                [INSERTED].LASTCHANGEDBY
            FROM
                [INSERTED]
            JOIN [IMINSPECTIONSTATUS] WITH(NOLOCK) ON [INSERTED].IMINSPECTIONSTATUSID = [IMINSPECTIONSTATUS].IMINSPECTIONSTATUSID
            WHERE
                [INDICATESSUCCESS] = 1                 
    END
END
GO
DISABLE TRIGGER [dbo].[TG_IMINSPECTION_INSERT_EVENT_QUEUE_PASSED]
    ON [dbo].[IMINSPECTION];


GO


CREATE TRIGGER [TG_IMINSPECTION_INSERT_EVENT_QUEUE_SCHEDULED] ON IMINSPECTION
   AFTER INSERT
AS 
BEGIN

	SET NOCOUNT ON;

	BEGIN
		INSERT INTO [INSPECTIONEVENTQUEUE]
			( 
				[IMINSPECTIONID],
				[INSPECTIONNUMBER],
				[INSPECTIONEVENTTYPEID],
				[EVENTSTATUSID],
				[CREATEDDATE],
				[INSPECTIONLASTCHANGEDBY]
			)
			-- check if the status of the Inspection has SCHEDULED flag(it can have other flags set to 'true'), if this condition is met then insert a new record in the Inspection Event Queue table
			SELECT
				[INSERTED].IMINSPECTIONID,
				[INSERTED].INSPECTIONNUMBER,
				2, -- ID for 'Inspection Scheduled' Inspection event Type 
				1, -- ID for 'Pending' event Status
				GETUTCDATE(),
				[INSERTED].LASTCHANGEDBY
			FROM
				[INSERTED]
			JOIN [IMINSPECTIONSTATUS] WITH(NOLOCK) ON [INSERTED].IMINSPECTIONSTATUSID = [IMINSPECTIONSTATUS].IMINSPECTIONSTATUSID
			WHERE
				[SCHEDULEDFLAG] = 1 				
	END
END
GO
DISABLE TRIGGER [dbo].[TG_IMINSPECTION_INSERT_EVENT_QUEUE_SCHEDULED]
    ON [dbo].[IMINSPECTION];


GO

CREATE TRIGGER [TG_IMINSPECTION_INSERT_ELASTIC] ON  IMINSPECTION
   AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

    INSERT INTO [ELASTICSEARCHOBJECT]
    ( [ELASTICSEARCHOBJECTID] ,
        [OBJECTID] ,
        [OBJECTCLASSNAME] ,
        [ROWVERSION] ,
        [CREATEDATE] ,
        [PROCESSEDDATE] ,
        [OBJECTACTION] ,
        [INDEXNAME]
    )
	SELECT
		NEWID() ,
		[Inserted].[IMINSPECTIONID] ,
        'EnerGovBusiness.Inspections.Inspection' ,
        [Inserted].[ROWVERSION] ,
        GETDATE() ,
        NULL ,
        1 ,
        (SELECT STRINGVALUE FROM SETTINGS WITH (NOLOCK) WHERE NAME = 'ServiceBusTenant')
	FROM [Inserted];

END
GO

CREATE TRIGGER [TG_IMINSPECTION_UPDATE_ELASTIC] ON  IMINSPECTION
   AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

    INSERT INTO [ELASTICSEARCHOBJECT]
    ( [ELASTICSEARCHOBJECTID] ,
        [OBJECTID] ,
        [OBJECTCLASSNAME] ,
        [ROWVERSION] ,
        [CREATEDATE] ,
        [PROCESSEDDATE] ,
        [OBJECTACTION] ,
        [INDEXNAME]
    )
	SELECT
		NEWID() ,
		[Inserted].[IMINSPECTIONID] ,
        'EnerGovBusiness.Inspections.Inspection' ,
        [Inserted].[ROWVERSION] ,
        GETDATE() ,
        NULL ,
        2 ,
        (SELECT STRINGVALUE FROM SETTINGS WITH (NOLOCK) WHERE NAME = 'ServiceBusTenant')
	FROM [Inserted];

END
GO

CREATE TRIGGER [TG_IMINSPECTION_DELETE_ELASTIC] ON  IMINSPECTION
   AFTER DELETE
AS 
BEGIN
	SET NOCOUNT ON;

    INSERT INTO [ELASTICSEARCHOBJECT]
    ( [ELASTICSEARCHOBJECTID] ,
        [OBJECTID] ,
        [OBJECTCLASSNAME] ,
        [ROWVERSION] ,
        [CREATEDATE] ,
        [PROCESSEDDATE] ,
        [OBJECTACTION] ,
        [INDEXNAME]
    )
	SELECT
		NEWID() ,
		[Deleted].[IMINSPECTIONID] ,
        'EnerGovBusiness.Inspections.Inspection' ,
        [Deleted].[ROWVERSION] ,
        GETDATE() ,
        NULL ,
        3 ,
        (SELECT STRINGVALUE FROM SETTINGS WITH (NOLOCK) WHERE NAME = 'ServiceBusTenant')
	FROM [Deleted];
END