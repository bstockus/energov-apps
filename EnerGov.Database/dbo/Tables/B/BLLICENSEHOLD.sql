CREATE TABLE [dbo].[BLLICENSEHOLD] (
    [BLLICENSEHOLDID]    CHAR (36)      NOT NULL,
    [BLLICENSEID]        CHAR (36)      NOT NULL,
    [HOLDSETUPID]        CHAR (36)      NULL,
    [COMMENTS]           NVARCHAR (MAX) NULL,
    [SUSERGUID]          CHAR (36)      NULL,
    [CREATEDDATE]        DATETIME       NULL,
    [ORIGIN]             CHAR (36)      NULL,
    [ORIGINNUMBER]       NVARCHAR (150) NULL,
    [EFFECTIVEENDDATE]   DATETIME       NULL,
    [ACTIVE]             BIT            NOT NULL,
    [HOLDSEVERITYID]     INT            DEFAULT ((1)) NOT NULL,
    [ORIGINCMCODECASEID] CHAR (36)      NULL,
    CONSTRAINT [PK_BLLicenseHold] PRIMARY KEY CLUSTERED ([BLLICENSEHOLDID] ASC) WITH (FILLFACTOR = 90),
    CONSTRAINT [FK_BLLicenseHold_BLLicense] FOREIGN KEY ([BLLICENSEID]) REFERENCES [dbo].[BLLICENSE] ([BLLICENSEID]),
    CONSTRAINT [FK_BLLicenseHold_Hold] FOREIGN KEY ([HOLDSETUPID]) REFERENCES [dbo].[HOLDTYPESETUPS] ([HOLDSETUPID]),
    CONSTRAINT [FK_BLLicenseHold_HoldSeverity] FOREIGN KEY ([HOLDSEVERITYID]) REFERENCES [dbo].[HOLDSEVERITY] ([HOLDSEVERITYID]),
    CONSTRAINT [FK_BLLicenseHold_OriginCodeCase] FOREIGN KEY ([ORIGINCMCODECASEID]) REFERENCES [dbo].[CMCODECASE] ([CMCODECASEID]),
    CONSTRAINT [FK_BLLicenseHold_User] FOREIGN KEY ([SUSERGUID]) REFERENCES [dbo].[USERS] ([SUSERGUID])
);


GO
CREATE NONCLUSTERED INDEX [IX_BLLICENSEHOLD_BLLICENSEID]
    ON [dbo].[BLLICENSEHOLD]([BLLICENSEID] ASC)
    INCLUDE([BLLICENSEHOLDID]) WITH (FILLFACTOR = 90);


GO
CREATE NONCLUSTERED INDEX [IX_BLLICENSEHOLD_ORIGINCMCODECASEID]
    ON [dbo].[BLLICENSEHOLD]([ORIGINCMCODECASEID] ASC)
    INCLUDE([BLLICENSEHOLDID]);


GO

CREATE TRIGGER [TG_BLLICENSE_UPDATE_EVENT_QUEUE_HOLD_REMOVED] ON BLLICENSEHOLD
   AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	INSERT INTO [BUSINESSLICENSEEVENTQUEUE]
		( 
			[BLLICENSEID],
			[BUSINESSLICENSEEVENTTYPEID],
			[EVENTSTATUSID],
			[CREATEDDATE],
			[BUSINESSLICENSELASTCHANGEDBY],
			[HOLDSETUPID]
		)
		-- insert using a SELECT query (do not use IF EXISTS SELECT or SELECT into variables/use the variables) so that if a bulk update of BLLICENSE is made 
		--then we pick the correct BLLICENSEHOLD record to check the previous and new status
		SELECT 
			[INSERTED].BLLICENSEID,
			6, -- ID for 'HOLD REMOVED' event Type 
			1, -- ID for 'Pending' Event Status
			GETUTCDATE(),
			[INSERTED].SUSERGUID,
			[INSERTED].HOLDSETUPID
		FROM [INSERTED]
		INNER JOIN [DELETED] ON [DELETED].[BLLICENSEHOLDID] = [INSERTED].[BLLICENSEHOLDID]			
		LEFT OUTER JOIN [dbo].[BLLICENSE] ON [INSERTED].[BLLICENSEID] = [dbo].[BLLICENSE].[BLLICENSEID]
		LEFT OUTER JOIN [dbo].[BLLICENSETYPE] ON [BLLICENSE].[BLLICENSETYPEID] = [BLLICENSETYPE].[BLLICENSETYPEID]
		AND [BLLICENSETYPE].[BLLICENSETYPEMODULEID] = 1 -- BUSINESS LICENCE
		WHERE
			-- check if the new status has issued flag
			[INSERTED].[ACTIVE] != 1
			-- check if the old status of the does not have the ACTIVE flag, if it's already ACTIVE then do not insert a new record in the Event Queue table
		AND [DELETED].[ACTIVE] = 1
 
END
GO

CREATE TRIGGER [TG_BLLICENSE_UPDATE_EVENT_QUEUE_ONHOLD] ON BLLICENSEHOLD
   AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	INSERT INTO [BUSINESSLICENSEEVENTQUEUE]
		( 
			[BLLICENSEID],
			[BUSINESSLICENSEEVENTTYPEID],
			[EVENTSTATUSID],
			[CREATEDDATE],
			[BUSINESSLICENSELASTCHANGEDBY],
			[HOLDSETUPID]
		)
		-- insert using a SELECT query (do not use IF EXISTS SELECT or SELECT into variables/use the variables) so that if a bulk update of BLLICENSE is made 
		--then we pick the correct BLLICENSEHOLD record to check the previous and new status
		SELECT 
			[INSERTED].BLLICENSEID,
			7, -- ID for 'HoldAdded' event Type 
			1, -- ID for 'Pending' Event Status
			GETUTCDATE(),
			[INSERTED].SUSERGUID,
			[INSERTED].HOLDSETUPID
		FROM [INSERTED]
		INNER JOIN [DELETED] ON [DELETED].[BLLICENSEHOLDID] = [INSERTED].[BLLICENSEHOLDID]
		LEFT OUTER JOIN [dbo].[BLLICENSE] ON [INSERTED].[BLLICENSEID] = [dbo].[BLLICENSE].[BLLICENSEID]
		LEFT OUTER JOIN [dbo].[BLLICENSETYPE] ON [BLLICENSE].[BLLICENSETYPEID] = [BLLICENSETYPE].[BLLICENSETYPEID]
		AND [BLLICENSETYPE].[BLLICENSETYPEMODULEID] = 1 -- BUSINESS LICENCE
		WHERE
			-- check if the new status has issued flag
			[INSERTED].[ACTIVE] = 1
			-- check if the old status of the does not have the ACTIVE flag, if it's already ACTIVE then do not insert a new record in the Event Queue table
		AND [DELETED].[ACTIVE] != 1
 
END
GO
CREATE TRIGGER [TG_BLLICENSE_INSERT_EVENT_QUEUE_ONHOLD] ON BLLICENSEHOLD
   AFTER INSERT
AS 
BEGIN

	SET NOCOUNT ON;

	BEGIN
		INSERT INTO [BUSINESSLICENSEEVENTQUEUE]
			( 
				[BLLICENSEID],
				[BUSINESSLICENSEEVENTTYPEID],
				[EVENTSTATUSID],
				[CREATEDDATE],
				[BUSINESSLICENSELASTCHANGEDBY],
				[HOLDSETUPID]
			)
			-- Insert a new record in the Event Queue table anytime add hold on Business License
			SELECT
				[INSERTED].BLLICENSEID,
				7, -- ID for 'HoldAdded' event Type 
				1, -- ID for 'Pending' Event Status
				GETUTCDATE(),
				[INSERTED].SUSERGUID,				
				[INSERTED].HOLDSETUPID
			FROM [INSERTED]
			LEFT OUTER JOIN [dbo].[BLLICENSE] ON [INSERTED].[BLLICENSEID] = [dbo].[BLLICENSE].[BLLICENSEID]
			LEFT OUTER JOIN [dbo].[BLLICENSETYPE] ON [BLLICENSE].[BLLICENSETYPEID] = [BLLICENSETYPE].[BLLICENSETYPEID]
			AND [BLLICENSETYPE].[BLLICENSETYPEMODULEID] = 1 -- BUSINESS LICENCE
            WHERE [INSERTED].[ACTIVE] = 1
	END
END
GO

CREATE TRIGGER [TG_BLLICENSE_DELETE_EVENT_QUEUE_HOLD_REMOVED] ON BLLICENSEHOLD
   AFTER DELETE
AS 
BEGIN
	SET NOCOUNT ON;

	BEGIN
		INSERT INTO [BUSINESSLICENSEEVENTQUEUE]
		( 
			[BLLICENSEID],
			[BUSINESSLICENSEEVENTTYPEID],
			[EVENTSTATUSID],
			[CREATEDDATE],
			[BUSINESSLICENSELASTCHANGEDBY],
			[HOLDSETUPID]
		)
			-- Insert a new record in the BLLICENSE Event Queue table anytime a LICENSE HOLD is deleted (don't need to check the status)
			SELECT
				[DELETED].BLLICENSEID,
				6, -- ID for 'HOLD REMOVED' Permit event Type 
				1, -- ID for 'Pending' Event Status
				GETUTCDATE(),
			    [DELETED].SUSERGUID,
				[DELETED].HOLDSETUPID
			FROM [DELETED]				
			LEFT OUTER JOIN [dbo].[BLLICENSE] ON [DELETED].[BLLICENSEID] = [dbo].[BLLICENSE].[BLLICENSEID]
			LEFT OUTER JOIN [dbo].[BLLICENSETYPE] ON [BLLICENSE].[BLLICENSETYPEID] = [BLLICENSETYPE].[BLLICENSETYPEID]
			AND [BLLICENSETYPE].[BLLICENSETYPEMODULEID] = 1 -- BUSINESS LICENCE
	END
END