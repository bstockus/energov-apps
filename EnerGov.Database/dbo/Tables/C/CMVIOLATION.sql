CREATE TABLE [dbo].[CMVIOLATION] (
    [CMVIOLATIONID]             CHAR (36)      NOT NULL,
    [CMCODEREVISIONID]          CHAR (36)      NOT NULL,
    [CMCODEID]                  CHAR (36)      NOT NULL,
    [COMPLIANCEDATE]            DATETIME       NULL,
    [CITATIONISSUEDATE]         DATETIME       NULL,
    [CMVIOLATIONSTATUSID]       CHAR (36)      NOT NULL,
    [RESOLVEDDATE]              DATETIME       NULL,
    [CMCODECATEGORYID]          CHAR (36)      NULL,
    [CMCODEVIOLATIONPRIORITYID] CHAR (36)      NULL,
    [CMCODEWFSTEPID]            CHAR (36)      NULL,
    [VIOLATIONMANAGERID]        CHAR (36)      NULL,
    [CORRECTIVEACTION]          NVARCHAR (MAX) NULL,
    [CMCODEWFACTIONID]          CHAR (36)      NULL,
    CONSTRAINT [PK_CodeViolations] PRIMARY KEY CLUSTERED ([CMVIOLATIONID] ASC) WITH (FILLFACTOR = 80),
    CONSTRAINT [FK_CMViolation_CMAction] FOREIGN KEY ([CMCODEWFACTIONID]) REFERENCES [dbo].[CMCODEWFACTIONSTEP] ([CMCODEWFACTIONSTEPID]),
    CONSTRAINT [FK_CMViolation_CMCode] FOREIGN KEY ([CMCODEID]) REFERENCES [dbo].[CMCODE] ([CMCODEID]),
    CONSTRAINT [FK_CMViolation_CMStep] FOREIGN KEY ([CMCODEWFSTEPID]) REFERENCES [dbo].[CMCODEWFSTEP] ([CMCODEWFSTEPID]),
    CONSTRAINT [FK_CMViolation_Priority] FOREIGN KEY ([CMCODEVIOLATIONPRIORITYID]) REFERENCES [dbo].[CMCODEVIOLATIONPRIORITY] ([CMCODEVIOLATIONPRIORITYID]),
    CONSTRAINT [FK_CMViolation_Status] FOREIGN KEY ([CMVIOLATIONSTATUSID]) REFERENCES [dbo].[CMVIOLATIONSTATUS] ([CMVIOLATIONSTATUSID]),
    CONSTRAINT [FK_CMViolation_Users] FOREIGN KEY ([VIOLATIONMANAGERID]) REFERENCES [dbo].[USERS] ([SUSERGUID]),
    CONSTRAINT [FK_Violation_CodeCategory] FOREIGN KEY ([CMCODECATEGORYID]) REFERENCES [dbo].[CMCODECATEGORY] ([CMCODECATEGORYID]),
    CONSTRAINT [FK_Violation_Revision] FOREIGN KEY ([CMCODEREVISIONID]) REFERENCES [dbo].[CMCODEREVISION] ([CMCODEREVISIONID])
);


GO
CREATE NONCLUSTERED INDEX [IX_CMVIOLATION_CMCODEWFACTIONID]
    ON [dbo].[CMVIOLATION]([CMCODEWFACTIONID] ASC);


GO


CREATE TRIGGER [TG_CMVIOLATION_INSERTUPDATE_ELASTIC] ON  [CMVIOLATION]
   AFTER INSERT, UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

    INSERT INTO [ELASTICSEARCHOBJECT]
    ( [ELASTICSEARCHOBJECTID] ,
        [OBJECTID] ,
        [OBJECTCLASSNAME] ,
        [ROWVERSION] ,
        [CREATEDATE] ,
        [PROCESSEDDATE] ,
        [OBJECTACTION] ,
        [INDEXNAME]
    )
	SELECT
		NEWID() ,
		[C].[CMCODECASEID] ,
        'EnerGovBusiness.CodeEnforcement.CodeCase' ,
        [C].[ROWVERSION] ,
        GETDATE() ,
        NULL ,
        2 ,
        (SELECT STRINGVALUE FROM SETTINGS WITH (NOLOCK) WHERE NAME = 'ServiceBusTenant')
	FROM [Inserted]
	JOIN [CMCODEWFACTIONSTEP] AS [A] WITH (NOLOCK) ON [A].[CMCODEWFACTIONSTEPID] = [Inserted].[CMCODEWFACTIONID]
	JOIN [CMCODEWFSTEP] AS [S] WITH (NOLOCK) ON [S].[CMCODEWFSTEPID] = [A].[CMCODEWFSTEPID]
	JOIN [CMCODECASE] AS [C] WITH (NOLOCK) ON [C].[CMCODECASEID] = [S].[CMCODECASEID]

END
GO


CREATE TRIGGER [TG_CMVIOLATION_DELETE_ELASTIC] ON  [CMVIOLATION]
   AFTER DELETE
AS 
BEGIN
	SET NOCOUNT ON;

    INSERT INTO [ELASTICSEARCHOBJECT]
    ( [ELASTICSEARCHOBJECTID] ,
        [OBJECTID] ,
        [OBJECTCLASSNAME] ,
        [ROWVERSION] ,
        [CREATEDATE] ,
        [PROCESSEDDATE] ,
        [OBJECTACTION] ,
        [INDEXNAME]
    )
	SELECT
		NEWID() ,
		[C].[CMCODECASEID] ,
        'EnerGovBusiness.CodeEnforcement.CodeCase' ,
        [C].[ROWVERSION] ,
        GETDATE() ,
        NULL ,
        2 ,
        (SELECT STRINGVALUE FROM SETTINGS WITH (NOLOCK) WHERE NAME = 'ServiceBusTenant')
	FROM [Deleted]
	JOIN [CMCODEWFACTIONSTEP] AS [A] WITH (NOLOCK) ON [A].[CMCODEWFACTIONSTEPID] = [Deleted].[CMCODEWFACTIONID]
	JOIN [CMCODEWFSTEP] AS [S] WITH (NOLOCK) ON [S].[CMCODEWFSTEPID] = [A].[CMCODEWFSTEPID]
	JOIN [CMCODECASE] AS [C] WITH (NOLOCK) ON [C].[CMCODECASEID] = [S].[CMCODECASEID]

END
GO


CREATE TRIGGER [dbo].[TG_CMCODECASE_INSERT_EVENT_QUEUE_INVIOLATION] ON [dbo].[CMVIOLATION]
   AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

BEGIN
		INSERT INTO [CODECASEEVENTQUEUE]
			( 
				[CMCODECASEID],
				[CASENUMBER],
				[CODECASEEVENTTYPEID],
				[EVENTSTATUSID],
				[CREATEDDATE],
				[CODECASELASTCHANGEDBY]
			)
			-- check if the violation status of the code case does not have a success flag, 
			SELECT
				[CMCODECASE].CMCODECASEID,
				[CMCODECASE].CASENUMBER,
				3, -- ID for 'Code Case In Violation' Code Case event Type 
				1, -- ID for 'Pending' Event Status
				GETUTCDATE(),
				[CMCODECASE].LASTCHANGEDBY
			FROM [INSERTED] NEWVIOLATION
			INNER JOIN CMCODEWFSTEP NEWCMCODEWFSTEP ON NEWCMCODEWFSTEP.CMCODEWFSTEPID = NEWVIOLATION.CMCODEWFSTEPID
			INNER JOIN CMCODECASE ON [CMCODECASE].CMCODECASEID = NEWCMCODEWFSTEP.CMCODECASEID
			INNER JOIN CMVIOLATIONSTATUS WITH(NOLOCK) ON NEWVIOLATION.CMVIOLATIONSTATUSID = [CMVIOLATIONSTATUS].CMVIOLATIONSTATUSID
			WHERE [CMVIOLATIONSTATUS].SUCCESSFLAG = 0
			-- the record should be inserted in event queue table ONLY if there are no other violation for the code case
			-- that has a status other than 'success' flag
			AND NOT EXISTS(SELECT 1 FROM CMVIOLATION
			INNER JOIN CMCODEWFSTEP OTHERCMCODEWFSTEP ON OTHERCMCODEWFSTEP.CMCODEWFSTEPID = CMVIOLATION.CMCODEWFSTEPID
			INNER JOIN CMCODECASE ON [CMCODECASE].CMCODECASEID = OTHERCMCODEWFSTEP.CMCODECASEID
			INNER JOIN CMVIOLATIONSTATUS WITH(NOLOCK) ON [CMVIOLATION].CMVIOLATIONSTATUSID = [CMVIOLATIONSTATUS].CMVIOLATIONSTATUSID
			WHERE [CMVIOLATIONSTATUS].SUCCESSFLAG = 0 AND [CMVIOLATION].CMVIOLATIONID <> NEWVIOLATION.CMVIOLATIONID
			AND NEWCMCODEWFSTEP.CMCODECASEID = OTHERCMCODEWFSTEP.CMCODECASEID)
	END
END
GO

CREATE TRIGGER [dbo].[TG_CMCODECASE_UPDATE_EVENT_QUEUE_INVIOLATION] ON [dbo].[CMVIOLATION]
   AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	BEGIN
		INSERT INTO [CODECASEEVENTQUEUE]
			( 
				[CMCODECASEID],
				[CASENUMBER],
				[CODECASEEVENTTYPEID],
				[EVENTSTATUSID],
				[CREATEDDATE],
				[CODECASELASTCHANGEDBY]
			)
			-- insert using a SELECT query (do not use IF EXISTS SELECT or SELECT into variables/use the variables) so that if a bulk update of code case is made 
			-- then we pick the correct code case record to check the previous and new status
			--if this condition is met then insert a new record in the CodeCase Event Queue table
			SELECT
				[CMCODECASE].CMCODECASEID,
				[CMCODECASE].CASENUMBER,
				3, -- ID for 'Code Case In Violation' Code Case event Type 
				1, -- ID for 'Pending' Event Status
				GETUTCDATE(),
				[CMCODECASE].LASTCHANGEDBY
			FROM [INSERTED] NEWVIOLATION
				INNER JOIN CMCODEWFSTEP NEWCMCODEWFSTEP ON NEWCMCODEWFSTEP.CMCODEWFSTEPID = NEWVIOLATION.CMCODEWFSTEPID
				INNER JOIN CMCODECASE ON [CMCODECASE].CMCODECASEID = NEWCMCODEWFSTEP.CMCODECASEID
				JOIN [CMVIOLATIONSTATUS] AS [NEWSTATUS] WITH(NOLOCK) ON [NEWSTATUS].CMVIOLATIONSTATUSID = NEWVIOLATION.CMVIOLATIONSTATUSID
				JOIN [DELETED] ON [DELETED].CMVIOLATIONID = NEWVIOLATION.CMVIOLATIONID
				JOIN [CMVIOLATIONSTATUS] AS [OLDSTATUS] WITH(NOLOCK) ON [OLDSTATUS].CMVIOLATIONSTATUSID = [DELETED].CMVIOLATIONSTATUSID
			WHERE
				-- check if the new status has no success flag and earlier it had a success flag
				-- the record should be inserted in event queue table ONLY if there are no other violation for the code case
				-- that has a status other than 'success' flag
				[NEWSTATUS].[SUCCESSFLAG] = 0
			AND NOT([OLDSTATUS].[SUCCESSFLAG] = 0)
			AND NOT EXISTS(SELECT 1 FROM CMVIOLATION
			INNER JOIN CMCODEWFSTEP OTHERCMCODEWFSTEP ON OTHERCMCODEWFSTEP.CMCODEWFSTEPID = CMVIOLATION.CMCODEWFSTEPID
			INNER JOIN CMCODECASE ON [CMCODECASE].CMCODECASEID = OTHERCMCODEWFSTEP.CMCODECASEID
			INNER JOIN CMVIOLATIONSTATUS WITH(NOLOCK) ON [CMVIOLATION].CMVIOLATIONSTATUSID = [CMVIOLATIONSTATUS].CMVIOLATIONSTATUSID
			WHERE [CMVIOLATIONSTATUS].SUCCESSFLAG = 0 AND [CMVIOLATION].CMVIOLATIONID <> NEWVIOLATION.CMVIOLATIONID
			AND NEWCMCODEWFSTEP.CMCODECASEID = OTHERCMCODEWFSTEP.CMCODECASEID)
			
	END
END