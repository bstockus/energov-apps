CREATE TABLE [dbo].[CAPSETTING] (
    [CAPSETTINGID]  CHAR (36)       NOT NULL,
    [NAME]          NVARCHAR (50)   NOT NULL,
    [BITVALUE]      BIT             NULL,
    [STRINGVALUE]   NVARCHAR (500)  NULL,
    [INTVALUE]      INT             NULL,
    [IMAGEVALUE]    VARBINARY (MAX) NULL,
    [LASTCHANGEDBY] CHAR (36)       NULL,
    [LASTCHANGEDON] DATETIME        CONSTRAINT [DF_CAPSETTING_LastChangedOn] DEFAULT (getutcdate()) NOT NULL,
    [ROWVERSION]    INT             CONSTRAINT [DF_CAPSETTING_RowVersion] DEFAULT ((1)) NOT NULL,
    CONSTRAINT [PK_CAPSETTING] PRIMARY KEY CLUSTERED ([CAPSETTINGID] ASC) WITH (FILLFACTOR = 90)
);


GO
CREATE NONCLUSTERED INDEX [CAPSETTING_IX_NAME]
    ON [dbo].[CAPSETTING]([NAME] ASC)
    INCLUDE([STRINGVALUE], [BITVALUE], [INTVALUE]);


GO

CREATE TRIGGER [TG_CAPSETTING_UPDATE] ON [dbo].[CAPSETTING]
   AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @CAPSETTINGLASTCHANGEDBY CHAR(36) = (CASE WHEN EXISTS(SELECT 1 FROM USERS WHERE SUSERGUID = '2FB39FA9-DF43-41D7-BB8B-C91836D30987')
																	THEN '2FB39FA9-DF43-41D7-BB8B-C91836D30987'
																	ELSE 'a24df514-c3c1-49c7-8784-0b2bf58c79fa'
												END)

	-- Check if LASTCHANGEDBY contains VALID User Id and it Exists in USERS table, this is in replacement to foreign key reference of CAPSETTING table with USERS table.
	IF EXISTS (SELECT * FROM inserted 
		LEFT OUTER JOIN USERS WITH (NOLOCK) ON USERS.SUSERGUID = inserted.LASTCHANGEDBY
		WHERE inserted.LASTCHANGEDBY IS NOT NULL AND USERS.SUSERGUID IS NULL)
	BEGIN		
		RAISERROR ('The INSERT or UPDATE statement conflicted with the FOREIGN KEY to table USERS', 16, 0);
		ROLLBACK;
		RETURN;
	END

    INSERT INTO [HISTORYSYSTEMSETUP]
    (	[ID],
		[ROWVERSION],
		[CHANGEDON],
		[CHANGEDBY],
		[FIELDNAME],
		[OLDVALUE],
		[NEWVALUE],
		[ADDITIONALINFO],
		[FORMID],
		[ACTION],
		[ISROOT],
		[RECORDNAME]
    )	
	SELECT
			[inserted].[CAPSETTINGID],
			[inserted].[ROWVERSION],
			GETUTCDATE(),
			ISNULL([inserted].[LASTCHANGEDBY], @CAPSETTINGLASTCHANGEDBY),
			'Bit Value Flag',
			CASE [deleted].[BITVALUE] WHEN 1 THEN 'Yes' WHEN 0 THEN 'No' ELSE '[none]' END,
			CASE [inserted].[BITVALUE] WHEN 1 THEN 'Yes' WHEN 0 THEN 'No' ELSE '[none]' END,
			'CAP Settings ' + ISNULL([CAPSETTINGMETADATA].[FRIENDLYNAME],[inserted].[NAME]),
			'5CC0F829-8852-475F-B53B-B10ED4831222',
			2,
			1,
			ISNULL([CAPSETTINGMETADATA].[FRIENDLYNAME],[inserted].[NAME])
	FROM	[deleted]
			JOIN [inserted] ON [deleted].[CAPSETTINGID] = [inserted].[CAPSETTINGID]
			LEFT JOIN [CAPSETTINGMETADATA] ON [CAPSETTINGMETADATA].[CAPSETTINGNAME] = [inserted].[NAME]
	WHERE	([deleted].[BITVALUE] <> [inserted].[BITVALUE])
			OR ([deleted].[BITVALUE] IS NULL AND [inserted].[BITVALUE] <> NULL)
			OR ([deleted].[BITVALUE] <> NULL AND [inserted].[BITVALUE] IS NULL)	
	
	UNION ALL
	SELECT
			[inserted].[CAPSETTINGID],
			[inserted].[ROWVERSION],
			GETUTCDATE(),
			ISNULL([inserted].[LASTCHANGEDBY], @CAPSETTINGLASTCHANGEDBY),
			'String Value',
			CASE [CAPSETTINGMETADATA].[ISINTBASED] WHEN 0 THEN (SELECT [dbo].[UFN_GET_CAPSETTING_STRING_LOOKUP_NAME]([deleted].[NAME],[deleted].[STRINGVALUE])) ELSE ISNULL([deleted].[STRINGVALUE],'[none]') END,
			CASE [CAPSETTINGMETADATA].[ISINTBASED] WHEN 0 THEN (SELECT [dbo].[UFN_GET_CAPSETTING_STRING_LOOKUP_NAME]([inserted].[NAME],[inserted].[STRINGVALUE])) ELSE ISNULL([inserted].[STRINGVALUE],'[none]') END,
			'CAP Settings ' + ISNULL([CAPSETTINGMETADATA].[FRIENDLYNAME],[inserted].[NAME]),
			'5CC0F829-8852-475F-B53B-B10ED4831222',
			2,
			1,
			ISNULL([CAPSETTINGMETADATA].[FRIENDLYNAME],[inserted].[NAME])
	FROM	[deleted]
			JOIN [inserted] ON [deleted].[CAPSETTINGID] = [inserted].[CAPSETTINGID]
			LEFT JOIN [CAPSETTINGMETADATA] ON [CAPSETTINGMETADATA].[CAPSETTINGNAME] = [inserted].[NAME]
	WHERE	ISNULL([deleted].[STRINGVALUE], '') <> ISNULL([inserted].[STRINGVALUE], '')
	
	UNION ALL
	SELECT
			[inserted].[CAPSETTINGID],
			[inserted].[ROWVERSION],
			GETUTCDATE(),
			ISNULL([inserted].[LASTCHANGEDBY], @CAPSETTINGLASTCHANGEDBY),
			'Integer Value',
			CASE [CAPSETTINGMETADATA].[ISINTBASED] WHEN 1 THEN (SELECT [dbo].[UFN_GET_CAPSETTING_INT_LOOKUP_NAME]([deleted].[NAME],[deleted].[INTVALUE])) ELSE ISNULL(CONVERT(NVARCHAR(MAX),[deleted].[INTVALUE]),'[none]') END,
			CASE [CAPSETTINGMETADATA].[ISINTBASED] WHEN 1 THEN (SELECT [dbo].[UFN_GET_CAPSETTING_INT_LOOKUP_NAME]([inserted].[NAME],[inserted].[INTVALUE])) ELSE ISNULL(CONVERT(NVARCHAR(MAX),[inserted].[INTVALUE]),'[none]') END,
			'CAP Settings ' + ISNULL([CAPSETTINGMETADATA].[FRIENDLYNAME],[inserted].[NAME]),
			'5CC0F829-8852-475F-B53B-B10ED4831222',
			2,
			1,
			ISNULL([CAPSETTINGMETADATA].[FRIENDLYNAME],[inserted].[NAME])
	FROM	[deleted]
			JOIN [inserted] ON [deleted].[CAPSETTINGID] = [inserted].[CAPSETTINGID]
			LEFT JOIN [CAPSETTINGMETADATA] ON [CAPSETTINGMETADATA].[CAPSETTINGNAME] = [inserted].[NAME]
	WHERE	ISNULL([deleted].[INTVALUE], '') <> ISNULL([inserted].[INTVALUE], '')
	
	UNION ALL
	SELECT
			[inserted].[CAPSETTINGID],
			[inserted].[ROWVERSION],
			GETUTCDATE(),
			ISNULL([inserted].[LASTCHANGEDBY], @CAPSETTINGLASTCHANGEDBY),
			'Image Value',
			CASE WHEN [deleted].[IMAGEVALUE] IS NULL THEN '[none]' ELSE 'Icon' END,
			CASE WHEN [inserted].[IMAGEVALUE] IS NULL THEN '[none]' ELSE 'Icon' END,
			'CAP Settings ' + ISNULL([CAPSETTINGMETADATA].[FRIENDLYNAME],[inserted].[NAME]),
			'5CC0F829-8852-475F-B53B-B10ED4831222',
			2,
			1,
			ISNULL([CAPSETTINGMETADATA].[FRIENDLYNAME],[inserted].[NAME])
	FROM	[deleted]
			JOIN [inserted] ON [deleted].[CAPSETTINGID] = [inserted].[CAPSETTINGID]
			LEFT JOIN [CAPSETTINGMETADATA] ON [CAPSETTINGMETADATA].[CAPSETTINGNAME] = [inserted].[NAME]
	WHERE	[deleted].[IMAGEVALUE] <> [inserted].[IMAGEVALUE] OR 
			([deleted].[IMAGEVALUE] IS NULL AND [inserted].[IMAGEVALUE] IS NOT NULL) OR
			([deleted].[IMAGEVALUE] IS NOT NULL AND [inserted].[IMAGEVALUE] IS NULL)
END
GO

CREATE TRIGGER [TG_CAPSETTING_DELETE] ON [dbo].[CAPSETTING]
   AFTER DELETE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @CAPSETTINGLASTCHANGEDBY CHAR(36) = (CASE WHEN EXISTS(SELECT 1 FROM USERS WHERE SUSERGUID = '2FB39FA9-DF43-41D7-BB8B-C91836D30987')
																	THEN '2FB39FA9-DF43-41D7-BB8B-C91836D30987'
																	ELSE 'a24df514-c3c1-49c7-8784-0b2bf58c79fa'
												END)
    
	INSERT INTO [HISTORYSYSTEMSETUP]
    (	[ID],
		[ROWVERSION],
		[CHANGEDON],
		[CHANGEDBY],
		[FIELDNAME],
		[OLDVALUE],
		[NEWVALUE],
		[ADDITIONALINFO],
		[FORMID],
		[ACTION],
		[ISROOT],
		[RECORDNAME]
    )	
	SELECT
			[deleted].[CAPSETTINGID],
			[deleted].[ROWVERSION],
			GETUTCDATE(),
			ISNULL((SELECT dbo.UFN_GET_USERID_FROM_CONTEXT_INFO()), @CAPSETTINGLASTCHANGEDBY),
			'CAP Settings Deleted',
			'',
			'',
			'CAP Settings ' + ISNULL([CAPSETTINGMETADATA].[FRIENDLYNAME],[deleted].[NAME]),
			'5CC0F829-8852-475F-B53B-B10ED4831222',
			3,
			1,
			ISNULL([CAPSETTINGMETADATA].[FRIENDLYNAME],[deleted].[NAME])
	FROM	[deleted]
			LEFT JOIN [CAPSETTINGMETADATA] ON [CAPSETTINGMETADATA].[CAPSETTINGNAME] = [deleted].[NAME]
END
GO

CREATE TRIGGER [TG_CAPSETTING_INSERT] ON [dbo].[CAPSETTING]
   AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @CAPSETTINGLASTCHANGEDBY CHAR(36) = (CASE WHEN EXISTS(SELECT 1 FROM USERS WHERE SUSERGUID = '2FB39FA9-DF43-41D7-BB8B-C91836D30987')
																	THEN '2FB39FA9-DF43-41D7-BB8B-C91836D30987'
																	ELSE 'a24df514-c3c1-49c7-8784-0b2bf58c79fa'
												END)

	-- Check if LASTCHANGEDBY contains VALID User Id and it Exists in USERS table, this is in replacement to foreign key reference of CAPSETTING table with USERS table.
	IF EXISTS (SELECT * FROM inserted 
		LEFT OUTER JOIN USERS WITH (NOLOCK) ON USERS.SUSERGUID = inserted.LASTCHANGEDBY
		WHERE inserted.LASTCHANGEDBY IS NOT NULL AND USERS.SUSERGUID IS NULL)
	BEGIN		
		RAISERROR ('The INSERT or UPDATE statement conflicted with the FOREIGN KEY to table USERS', 16, 0);
		ROLLBACK;
		RETURN;
	END

    INSERT INTO [HISTORYSYSTEMSETUP]
    (	[ID],
		[ROWVERSION],
		[CHANGEDON],
		[CHANGEDBY],
		[FIELDNAME],
		[OLDVALUE],
		[NEWVALUE],
		[ADDITIONALINFO],
		[FORMID],
		[ACTION],
		[ISROOT],
		[RECORDNAME]
    )
	SELECT
			[inserted].[CAPSETTINGID],
			[inserted].[ROWVERSION],
			GETUTCDATE(),
			ISNULL([inserted].[LASTCHANGEDBY], @CAPSETTINGLASTCHANGEDBY),
			'CAP Settings Added',
			'',
			'',
			'CAP Settings ' + ISNULL([CAPSETTINGMETADATA].[FRIENDLYNAME],[inserted].[NAME]),
			'5CC0F829-8852-475F-B53B-B10ED4831222',
			1,
			1,
			ISNULL([CAPSETTINGMETADATA].[FRIENDLYNAME],[inserted].[NAME])
	FROM	[inserted]	
			LEFT JOIN [CAPSETTINGMETADATA] ON [CAPSETTINGMETADATA].[CAPSETTINGNAME] = [inserted].[NAME]
END