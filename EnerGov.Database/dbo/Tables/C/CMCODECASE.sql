CREATE TABLE [dbo].[CMCODECASE] (
    [CMCODECASEID]              CHAR (36)      NOT NULL,
    [CASENUMBER]                NVARCHAR (50)  NOT NULL,
    [CREATEDBY]                 CHAR (36)      NULL,
    [OPENEDDATE]                DATETIME       CONSTRAINT [DF_CodeCase_dDateOpened] DEFAULT (getdate()) NOT NULL,
    [CLOSEDDATE]                DATETIME       NULL,
    [DISTRICTID]                CHAR (36)      NULL,
    [ASSIGNEDTO]                CHAR (36)      NULL,
    [CMCASETYPEID]              CHAR (36)      NULL,
    [ROWVERSION]                INT            NOT NULL,
    [LASTCHANGEDON]             DATETIME       NULL,
    [LASTCHANGEDBY]             CHAR (36)      NULL,
    [ASSETGEOMETRYCOLLECTIONID] CHAR (36)      NULL,
    [CMCODECASESTATUSID]        CHAR (36)      NOT NULL,
    [IMPORTCUSTOMFIELDLAYOUTID] CHAR (36)      NULL,
    [DESCRIPTION]               VARCHAR (MAX)  NULL,
    [CALENDARDUEDATE]           DATETIME       NULL,
    [EMERGENCY]                 BIT            NULL,
    [TYLER311REQUESTID]         INT            NULL,
    [TYLER311REQUESTNUMBER]     NVARCHAR (100) NULL,
    CONSTRAINT [PK_CodeCase] PRIMARY KEY CLUSTERED ([CMCODECASEID] ASC) WITH (FILLFACTOR = 80),
    CONSTRAINT [FK_CMCodeCase_CMCaseType] FOREIGN KEY ([CMCASETYPEID]) REFERENCES [dbo].[CMCASETYPE] ([CMCASETYPEID]),
    CONSTRAINT [FK_CMCodeCase_CMCodeCaseStatus] FOREIGN KEY ([CMCODECASESTATUSID]) REFERENCES [dbo].[CMCODECASESTATUS] ([CMCODECASESTATUSID]),
    CONSTRAINT [FK_CMCodeCase_CustomField] FOREIGN KEY ([IMPORTCUSTOMFIELDLAYOUTID]) REFERENCES [dbo].[CUSTOMFIELDLAYOUT] ([GCUSTOMFIELDLAYOUTS]),
    CONSTRAINT [FK_CMCodeCase_Users] FOREIGN KEY ([LASTCHANGEDBY]) REFERENCES [dbo].[USERS] ([SUSERGUID]),
    CONSTRAINT [FK_CMCodeCase_Users1] FOREIGN KEY ([ASSIGNEDTO]) REFERENCES [dbo].[USERS] ([SUSERGUID]),
    CONSTRAINT [FK_CMCodeCase_Users2] FOREIGN KEY ([CREATEDBY]) REFERENCES [dbo].[USERS] ([SUSERGUID]),
    CONSTRAINT [FK_CodeCase_AssetGeometryCollection] FOREIGN KEY ([ASSETGEOMETRYCOLLECTIONID]) REFERENCES [dbo].[ASSETGEOMETRYCOLLECTION] ([ASSETGEOMETRYCOLLECTIONID]),
    CONSTRAINT [FK_CodeCase_District] FOREIGN KEY ([DISTRICTID]) REFERENCES [dbo].[DISTRICT] ([DISTRICTID])
);


GO
CREATE NONCLUSTERED INDEX [IMPORT1]
    ON [dbo].[CMCODECASE]([CASENUMBER] ASC) WITH (FILLFACTOR = 80);


GO
CREATE NONCLUSTERED INDEX [IX_CMCODDECASE_ASSIGNTO]
    ON [dbo].[CMCODECASE]([ASSIGNEDTO] ASC, [OPENEDDATE] ASC)
    INCLUDE([CMCODECASEID], [CASENUMBER], [CLOSEDDATE], [DISTRICTID], [CMCASETYPEID], [ROWVERSION], [CMCODECASESTATUSID], [DESCRIPTION]);


GO
CREATE NONCLUSTERED INDEX [IX_CMCODECASE_LASTCHANGEDON]
    ON [dbo].[CMCODECASE]([LASTCHANGEDON] ASC)
    INCLUDE([CMCODECASEID]);


GO

CREATE TRIGGER [dbo].[TG_CMCODECASE_UPDATE_EVENT_QUEUE_CANCELLED] ON [dbo].[CMCODECASE]
   AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	BEGIN
		INSERT INTO [CODECASEEVENTQUEUE]
			( 
				[CMCODECASEID],
				[CASENUMBER],
				[CODECASEEVENTTYPEID],
				[EVENTSTATUSID],
				[CREATEDDATE],
				[CODECASELASTCHANGEDBY]
			)
		-- insert using a SELECT query (do not use IF EXISTS SELECT or SELECT into variables/use the variables) so that if a bulk update of code case is made 
		-- then we pick the correct code case record to check the previous and new status
		SELECT 
			[INSERTED].CMCODECASEID,
			[INSERTED].CASENUMBER,
			2, -- ID for 'Code Case Cancelled' Code Case event Type 
			1, -- ID for 'Pending' Event Status
			GETUTCDATE(),
			[INSERTED].LASTCHANGEDBY
		FROM [INSERTED]
		INNER JOIN [CMCODECASESTATUS] AS [NEWSTATUS] WITH(NOLOCK) ON [NEWSTATUS].[CMCODECASESTATUSID] = [INSERTED].[CMCODECASESTATUSID]
		INNER JOIN [DELETED] ON [DELETED].[CMCODECASEID] = [INSERTED].[CMCODECASEID]
		INNER JOIN [CMCODECASESTATUS] AS [OLDSTATUS] WITH(NOLOCK) ON [OLDSTATUS].[CMCODECASESTATUSID] = [DELETED].[CMCODECASESTATUSID]
		LEFT JOIN [dbo].[BLLICENSEHOLD] ON [INSERTED].[CMCODECASEID]=[BLLICENSEHOLD].[ORIGINCMCODECASEID]
		LEFT JOIN [dbo].[BLLICENSE] ON [BLLICENSEHOLD].[BLLICENSEID] = [dbo].[BLLICENSE].[BLLICENSEID]
			LEFT JOIN [dbo].[BLLICENSETYPE] ON [BLLICENSE].[BLLICENSETYPEID] = [BLLICENSETYPE].[BLLICENSETYPEID]
			AND [BLLICENSETYPE].[BLLICENSETYPEMODULEID] = 1 -- BUSINESS LICENCE
		WHERE
			-- check if the new status has no other flag other than the cancelled flag
			[NEWSTATUS].[CANCELLEDFLAG] = 1 AND [NEWSTATUS].[FAILUREFLAG] = 0 AND [NEWSTATUS].[SUCCESSFLAG] = 0
			-- check if the old status of the code case does not have ONLY the cancelled flag, if it's already cancelled ONLY then do not insert a new record in the Code Case Event Queue table
		AND NOT ([OLDSTATUS].[CANCELLEDFLAG] = 1 AND [OLDSTATUS].[FAILUREFLAG] = 0 AND [OLDSTATUS].[SUCCESSFLAG] = 0) 
	END
END
GO

CREATE TRIGGER [TG_CMCODECASE_UPDATE_ELASTIC] ON  CMCODECASE
   AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

    INSERT INTO [ELASTICSEARCHOBJECT]
    ( [ELASTICSEARCHOBJECTID] ,
        [OBJECTID] ,
        [OBJECTCLASSNAME] ,
        [ROWVERSION] ,
        [CREATEDATE] ,
        [PROCESSEDDATE] ,
        [OBJECTACTION] ,
        [INDEXNAME]
    )
	SELECT
		NEWID() ,
		[Inserted].[CMCODECASEID] ,
        'EnerGovBusiness.CodeEnforcement.CodeCase' ,
        [Inserted].[ROWVERSION] ,
        GETDATE() ,
        NULL ,
        2 ,
        (SELECT STRINGVALUE FROM SETTINGS WITH (NOLOCK) WHERE NAME = 'ServiceBusTenant')
	FROM [Inserted];

END
GO

CREATE TRIGGER [dbo].[TG_CMCODECASE_INSERT_EVENT_QUEUE_CREATED] ON [dbo].[CMCODECASE]
   AFTER INSERT
AS 
BEGIN

	SET NOCOUNT ON;

	BEGIN
		INSERT INTO [CODECASEEVENTQUEUE]
			( 
				[CMCODECASEID],
				[CASENUMBER],
				[CODECASEEVENTTYPEID],
				[EVENTSTATUSID],
				[CREATEDDATE],
				[CODECASELASTCHANGEDBY]
			)
			-- Insert a new record in the CodeCase Event Queue table anytime a code case is created
			SELECT
				[INSERTED].CMCODECASEID,
				[INSERTED].CASENUMBER,
				1, -- ID for 'CodeCase Created' Code Case event Type 
				1, -- ID for 'Pending' Event Status
				GETUTCDATE(),
				[INSERTED].LASTCHANGEDBY
			FROM [INSERTED]			
			LEFT JOIN [dbo].[BLLICENSEHOLD] ON [INSERTED].[CMCODECASEID]=[BLLICENSEHOLD].[ORIGINCMCODECASEID]
			LEFT JOIN [dbo].[BLLICENSE] ON [BLLICENSEHOLD].[BLLICENSEID] = [dbo].[BLLICENSE].[BLLICENSEID]
			LEFT JOIN [dbo].[BLLICENSETYPE] ON [BLLICENSE].[BLLICENSETYPEID] = [BLLICENSETYPE].[BLLICENSETYPEID]
			AND [BLLICENSETYPE].[BLLICENSETYPEMODULEID] = 1 -- BUSINESS LICENCE
	END
END
GO

CREATE TRIGGER [TG_CMCODECASE_INSERT_ELASTIC] ON  CMCODECASE
   AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

    INSERT INTO [ELASTICSEARCHOBJECT]
    ( [ELASTICSEARCHOBJECTID] ,
        [OBJECTID] ,
        [OBJECTCLASSNAME] ,
        [ROWVERSION] ,
        [CREATEDATE] ,
        [PROCESSEDDATE] ,
        [OBJECTACTION] ,
        [INDEXNAME]
    )
	SELECT
		NEWID() ,
		[Inserted].[CMCODECASEID] ,
        'EnerGovBusiness.CodeEnforcement.CodeCase' ,
        [Inserted].[ROWVERSION] ,
        GETDATE() ,
        NULL ,
        1 ,
        (SELECT STRINGVALUE FROM SETTINGS WITH (NOLOCK) WHERE NAME = 'ServiceBusTenant')
	FROM [Inserted];

END
GO

CREATE TRIGGER [dbo].[TG_CMCODECASE_INSERT_EVENT_QUEUE_CANCELLED] ON [dbo].[CMCODECASE]
   AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	BEGIN
		INSERT INTO [CODECASEEVENTQUEUE]
			( 
				[CMCODECASEID],
				[CASENUMBER],
				[CODECASEEVENTTYPEID],
				[EVENTSTATUSID],
				[CREATEDDATE],
				[CODECASELASTCHANGEDBY]
			)
			-- check if the status of the code case has cancelled flag(and no other flags are set to 'true'), 
			--if this condition is met then insert a new record in the CodeCase Event Queue table
			SELECT
				[INSERTED].CMCODECASEID,
				[INSERTED].CASENUMBER,
				2, -- ID for 'CodeCase Cancelled' Code Case event Type 
				1, -- ID for 'Pending' Event Status
				GETUTCDATE(),
				[INSERTED].LASTCHANGEDBY
			FROM [INSERTED]
			INNER JOIN CMCODECASESTATUS WITH(NOLOCK) ON	[INSERTED].CMCODECASESTATUSID = CMCODECASESTATUS.CMCODECASESTATUSID
			LEFT JOIN [dbo].[BLLICENSEHOLD] ON [INSERTED].[CMCODECASEID]=[BLLICENSEHOLD].[ORIGINCMCODECASEID]
			LEFT JOIN [dbo].[BLLICENSE] ON [BLLICENSEHOLD].[BLLICENSEID] = [dbo].[BLLICENSE].[BLLICENSEID]
			LEFT JOIN [dbo].[BLLICENSETYPE] ON [BLLICENSE].[BLLICENSETYPEID] = [BLLICENSETYPE].[BLLICENSETYPEID]
			AND [BLLICENSETYPE].[BLLICENSETYPEMODULEID] = 1 -- BUSINESS LICENCE
			WHERE CANCELLEDFLAG = 1
			AND SUCCESSFLAG = 0
			AND FAILUREFLAG = 0
	END
END
GO

CREATE TRIGGER [dbo].[TG_CMCODECASE_INSERT_EVENT_QUEUE_CLOSED] ON [dbo].[CMCODECASE]
   AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	BEGIN
		INSERT INTO [CODECASEEVENTQUEUE]
			( 
				[CMCODECASEID],
				[CASENUMBER],
				[CODECASEEVENTTYPEID],
				[EVENTSTATUSID],
				[CREATEDDATE],
				[CODECASELASTCHANGEDBY]
			)
			-- check if the status of the code case has closed date and success flag(and no other flags are set to 'true'), 
			--if this condition is met then insert a new record in the CodeCase Event Queue table
			SELECT
				[INSERTED].CMCODECASEID,
				[INSERTED].CASENUMBER,
				5, -- ID for 'CodeCase Closed' Code Case event Type 
				1, -- ID for 'Pending' Event Status
				GETUTCDATE(),
				[INSERTED].LASTCHANGEDBY
			FROM [INSERTED]
			INNER JOIN CMCODECASESTATUS WITH(NOLOCK) ON [INSERTED].CMCODECASESTATUSID = CMCODECASESTATUS.CMCODECASESTATUSID
			LEFT JOIN [dbo].[BLLICENSEHOLD] ON [INSERTED].[CMCODECASEID]=[BLLICENSEHOLD].[ORIGINCMCODECASEID]
			LEFT JOIN [dbo].[BLLICENSE] ON [BLLICENSEHOLD].[BLLICENSEID] = [dbo].[BLLICENSE].[BLLICENSEID]
			LEFT JOIN [dbo].[BLLICENSETYPE] ON [BLLICENSE].[BLLICENSETYPEID] = [BLLICENSETYPE].[BLLICENSETYPEID]
			AND [BLLICENSETYPE].[BLLICENSETYPEMODULEID] = 1 -- BUSINESS LICENCE
			WHERE SUCCESSFLAG = 1 AND CANCELLEDFLAG = 0 AND FAILUREFLAG = 0
			AND CLOSEDDATE IS NOT NULL
	END
END
GO

CREATE TRIGGER [TG_CMCODECASE_DELETE_ELASTIC] ON  CMCODECASE
   AFTER DELETE
AS 
BEGIN
	SET NOCOUNT ON;

    INSERT INTO [ELASTICSEARCHOBJECT]
    ( [ELASTICSEARCHOBJECTID] ,
        [OBJECTID] ,
        [OBJECTCLASSNAME] ,
        [ROWVERSION] ,
        [CREATEDATE] ,
        [PROCESSEDDATE] ,
        [OBJECTACTION] ,
        [INDEXNAME]
    )
	SELECT
		NEWID() ,
		[Deleted].[CMCODECASEID] ,
        'EnerGovBusiness.CodeEnforcement.CodeCase' ,
        [Deleted].[ROWVERSION] ,
        GETDATE() ,
        NULL ,
        3 ,
        (SELECT STRINGVALUE FROM SETTINGS WITH (NOLOCK) WHERE NAME = 'ServiceBusTenant')
	FROM [Deleted];

END
GO

CREATE TRIGGER [dbo].[TG_CMCODECASE_UPDATE_EVENT_QUEUE_CLOSED] ON [dbo].[CMCODECASE]
   AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	BEGIN
		INSERT INTO [CODECASEEVENTQUEUE]
			( 
				[CMCODECASEID],
				[CASENUMBER],
				[CODECASEEVENTTYPEID],
				[EVENTSTATUSID],
				[CREATEDDATE],
				[CODECASELASTCHANGEDBY]
			)
		-- insert using a SELECT query (do not use IF EXISTS SELECT or SELECT into variables/use the variables) so that if a bulk update of code case is made 
		-- then we pick the correct code case record to check the previous and new status
		SELECT 
			[INSERTED].CMCODECASEID,
			[INSERTED].CASENUMBER,
			5, -- ID for 'Code Case Closed' Code Case event Type 
			1, -- ID for 'Pending' Event Status
			GETUTCDATE(),
			[INSERTED].LASTCHANGEDBY
		FROM [INSERTED]
		INNER JOIN [CMCODECASESTATUS] AS [NEWSTATUS] WITH(NOLOCK) ON [NEWSTATUS].[CMCODECASESTATUSID] = [INSERTED].[CMCODECASESTATUSID]
		INNER JOIN [DELETED] ON [DELETED].[CMCODECASEID] = [INSERTED].[CMCODECASEID]
		INNER JOIN [CMCODECASESTATUS] AS [OLDSTATUS] WITH(NOLOCK) ON [OLDSTATUS].[CMCODECASESTATUSID] = [DELETED].[CMCODECASESTATUSID]
		LEFT JOIN [dbo].[BLLICENSEHOLD] ON [INSERTED].[CMCODECASEID]=[BLLICENSEHOLD].[ORIGINCMCODECASEID]
		LEFT JOIN [dbo].[BLLICENSE] ON [BLLICENSEHOLD].[BLLICENSEID] = [dbo].[BLLICENSE].[BLLICENSEID]
			LEFT JOIN [dbo].[BLLICENSETYPE] ON [BLLICENSE].[BLLICENSETYPEID] = [BLLICENSETYPE].[BLLICENSETYPEID]
			AND [BLLICENSETYPE].[BLLICENSETYPEMODULEID] = 1 -- BUSINESS LICENCE
		WHERE
			-- check if the new status has no other flag other than the success flag
			[NEWSTATUS].[SUCCESSFLAG] = 1 AND [NEWSTATUS].[FAILUREFLAG] = 0 AND [NEWSTATUS].[CANCELLEDFLAG] = 0
		AND [INSERTED].[CLOSEDDATE] IS NOT NULL
			-- check if the old status of the code case does not have ONLY the success flag, 
			-- if it's already success ONLY then do not insert a new record in the Code Case Event Queue table
		AND NOT ([OLDSTATUS].[SUCCESSFLAG] = 1 AND [OLDSTATUS].[FAILUREFLAG] = 0 AND [OLDSTATUS].[CANCELLEDFLAG] = 0 AND [DELETED].[CLOSEDDATE] IS NOT NULL) 
	END
END