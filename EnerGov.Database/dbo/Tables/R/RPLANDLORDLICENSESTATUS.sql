CREATE TABLE [dbo].[RPLANDLORDLICENSESTATUS] (
    [RPLANDLORDLICENSESTATUSID]    CHAR (36)      NOT NULL,
    [NAME]                         NVARCHAR (50)  NOT NULL,
    [DESCRIPTION]                  NVARCHAR (MAX) NULL,
    [RPLANDLORDLICENSESYSSTATUSID] INT            NOT NULL,
    [LASTCHANGEDBY]                CHAR (36)      NULL,
    [LASTCHANGEDON]                DATETIME       CONSTRAINT [DF_RPLANDLORDLICENSESYSSTATUS_LastChangedOn] DEFAULT (getutcdate()) NOT NULL,
    [ROWVERSION]                   INT            CONSTRAINT [DF_RPLANDLORDLICENSESYSSTATUS_RowVersion] DEFAULT ((1)) NOT NULL,
    CONSTRAINT [PK_RPLANDLORDLICENSESTATUS] PRIMARY KEY NONCLUSTERED ([RPLANDLORDLICENSESTATUSID] ASC) WITH (FILLFACTOR = 90),
    CONSTRAINT [FK_RPLLLICSTATUS_SYSSTATUS] FOREIGN KEY ([RPLANDLORDLICENSESYSSTATUSID]) REFERENCES [dbo].[RPLANDLORDLICENSESYSSTATUS] ([RPLANDLORDLICENSESYSSTATUSID])
);


GO
CREATE NONCLUSTERED INDEX [RPLANDLORDLICENSESTATUS_IX_QUERY]
    ON [dbo].[RPLANDLORDLICENSESTATUS]([RPLANDLORDLICENSESTATUSID] ASC, [NAME] ASC);


GO


CREATE TRIGGER [dbo].[TG_RPLANDLORDLICENSESTATUS_DELETE] ON  [dbo].[RPLANDLORDLICENSESTATUS]
	AFTER DELETE
AS 
BEGIN
	SET NOCOUNT ON;
	INSERT INTO [HISTORYSYSTEMSETUP]
		(	[ID],
			[ROWVERSION],
			[CHANGEDON],
			[CHANGEDBY],
			[FIELDNAME],
			[OLDVALUE],
			[NEWVALUE],
			[ADDITIONALINFO]
		)
	SELECT
			[deleted].[RPLANDLORDLICENSESTATUSID],
			[deleted].[ROWVERSION],
			GETUTCDATE(),
			(SELECT dbo.UFN_GET_USERID_FROM_CONTEXT_INFO()),
			'Landlord License Status Deleted',
			'',
			'',
			'Landlord License Status (' + [deleted].[NAME] + ')'
	FROM	[deleted]
END
GO


CREATE TRIGGER [dbo].[TG_RPLANDLORDLICENSESTATUS_INSERT] ON [dbo].[RPLANDLORDLICENSESTATUS]
   AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	-- Check if LASTCHANGEDBY contains VALID User Id and it Exists in USERS table, this is in replacement to foreign key reference of RPLANDLORDLICENSESTATUS table with USERS table.
	IF EXISTS (SELECT * FROM inserted 
		LEFT OUTER JOIN USERS WITH (NOLOCK) ON USERS.SUSERGUID = inserted.LASTCHANGEDBY
		WHERE inserted.LASTCHANGEDBY IS NOT NULL AND USERS.SUSERGUID IS NULL)
	BEGIN		
		RAISERROR ('The INSERT or UPDATE statement conflicted with the FOREIGN KEY to table USERS', 16, 0);
		ROLLBACK;
		RETURN;
	END

	INSERT INTO [HISTORYSYSTEMSETUP]
		(
			[ID],
			[ROWVERSION],
			[CHANGEDON],
			[CHANGEDBY],
			[FIELDNAME],
			[OLDVALUE],
			[NEWVALUE],
			[ADDITIONALINFO]
		)
	SELECT 
			[inserted].[RPLANDLORDLICENSESTATUSID], 
			[inserted].[ROWVERSION],
			GETUTCDATE(),
			[inserted].[LASTCHANGEDBY],
			'Landlord License Status Added',
			'',
			'',
			'Landlord License Status (' + [inserted].[NAME] + ')'
    FROM	[inserted] 
END
GO


CREATE TRIGGER [dbo].[TG_RPLANDLORDLICENSESTATUS_UPDATE] ON  [dbo].[RPLANDLORDLICENSESTATUS]
	AFTER UPDATE
AS 
BEGIN	
	SET NOCOUNT ON;

	-- Check if LASTCHANGEDBY contains VALID User Id and it Exists in USERS table, this is in replacement to foreign key reference of RPLANDLORDLICENSESTATUS table with USERS table.
	IF EXISTS (SELECT * FROM inserted 
		LEFT OUTER JOIN USERS WITH (NOLOCK) ON USERS.SUSERGUID = inserted.LASTCHANGEDBY
		WHERE inserted.LASTCHANGEDBY IS NOT NULL AND USERS.SUSERGUID IS NULL)
	BEGIN		
		RAISERROR ('The INSERT or UPDATE statement conflicted with the FOREIGN KEY to table USERS', 16, 0);
		ROLLBACK;
		RETURN;
	END

	INSERT INTO [HISTORYSYSTEMSETUP]
		(	[ID],
			[ROWVERSION],
			[CHANGEDON],
			[CHANGEDBY],
			[FIELDNAME],
			[OLDVALUE],
			[NEWVALUE],
			[ADDITIONALINFO]
		)
	SELECT 
			[inserted].[RPLANDLORDLICENSESTATUSID],
			[inserted].[ROWVERSION],
			GETUTCDATE(),
			[inserted].[LASTCHANGEDBY],
			'Landlord License Status Name',
			[deleted].[NAME],
			[inserted].[NAME],
			'Landlord License Status (' + [inserted].[NAME] + ')'
	FROM	[deleted]
			JOIN [inserted] ON [deleted].[RPLANDLORDLICENSESTATUSID] = [inserted].[RPLANDLORDLICENSESTATUSID]
	WHERE	[deleted].[NAME] <> [inserted].[NAME]
	UNION ALL
	SELECT 
			[inserted].[RPLANDLORDLICENSESTATUSID],
			[inserted].[ROWVERSION],
			GETUTCDATE(),
			[inserted].[LASTCHANGEDBY],
			'Landlord License Status Description',			
			ISNULL([deleted].[DESCRIPTION],'[none]'),
			ISNULL([inserted].[DESCRIPTION],'[none]'),
			'Landlord License Status (' + [inserted].[NAME] + ')'
	FROM	[deleted]
			JOIN [inserted] ON [deleted].[RPLANDLORDLICENSESTATUSID] = [inserted].[RPLANDLORDLICENSESTATUSID]	
	WHERE	ISNULL([deleted].[DESCRIPTION],'') <> ISNULL([inserted].[DESCRIPTION], '')
	UNION ALL
	SELECT
			[inserted].[RPLANDLORDLICENSESTATUSID],
			[inserted].[ROWVERSION],
			GETUTCDATE(),
			[inserted].[LASTCHANGEDBY],
			'Landlord License Status System Status',			
			[RPLANDLORDLICENSESYSSTATUS_DELETED].[NAME],
			[RPLANDLORDLICENSESYSSTATUS_INSERTED].[NAME],
			'Landlord License Status (' + [inserted].[NAME] + ')'
	FROM	[deleted]
			JOIN [inserted] ON [deleted].[RPLANDLORDLICENSESTATUSID] = [inserted].[RPLANDLORDLICENSESTATUSID]
			JOIN RPLANDLORDLICENSESYSSTATUS RPLANDLORDLICENSESYSSTATUS_DELETED WITH (NOLOCK) ON [deleted].[RPLANDLORDLICENSESYSSTATUSID] = [RPLANDLORDLICENSESYSSTATUS_DELETED].[RPLANDLORDLICENSESYSSTATUSID]
			JOIN RPLANDLORDLICENSESYSSTATUS RPLANDLORDLICENSESYSSTATUS_INSERTED WITH (NOLOCK) ON [inserted].[RPLANDLORDLICENSESYSSTATUSID] = [RPLANDLORDLICENSESYSSTATUS_INSERTED].[RPLANDLORDLICENSESYSSTATUSID]	
	WHERE	[deleted].[RPLANDLORDLICENSESYSSTATUSID] <> [inserted].[RPLANDLORDLICENSESYSSTATUSID]
END